package jidnet.gui;

import java.awt.Color;
import java.awt.Window;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.image.BufferedImage;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.File;
import java.io.FileInputStream;
import java.io.FilenameFilter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Properties;
import javax.imageio.ImageIO;
import javax.swing.DefaultListModel;
import javax.swing.InputVerifier;
import javax.swing.JComponent;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.ProgressMonitor;
import javax.swing.SwingWorker;
import javax.swing.Timer;
import javax.swing.text.MaskFormatter;
import jidnet.idnet.Antigen;
import jidnet.idnet.Helper;
import jidnet.idnet.Idiotype;
import jidnet.idnet.DeterminantBits;

/**
 *
 * @author Sven Willner
 */
public class MainWindow extends javax.swing.JFrame {

    private Timer timer;
    private int redrawDelay;
    private MaskFormatter textCustomBitMaskFormatter, textCustomBitValuesFormatter;

    /** Creates new form MainWindow */
    public MainWindow() {
        initComponents();

        mainTabbedPane.removeTabAt(0); // Link matrix panel
        parameterPanel.setVisible(false);
        updateParamSpinners();

        spinnerMax_s.setValue(Application.getIdnetManager().getmax_s());
        redrawDelay = Integer.parseInt(Application.getConfiguration().getProperty("redraw_delay", "10"));
        spinnerRedrawDelay.setValue(redrawDelay);
        spinnerTimerDelay.setValue(Integer.parseInt(Application.getConfiguration().getProperty("timer_delay", "10")));

        for (int i = 0; i < Application.getIdnetManager().getd(); i++) {
            ((DefaultListModel) detBitsList.getModel()).addElement(i + "");
        }

        this.setExtendedState(this.getExtendedState() | MAXIMIZED_BOTH);

        timer = new Timer(Integer.parseInt(Application.getConfiguration().getProperty("timer_delay", "10")), new ActionListener() {

            public void actionPerformed(ActionEvent e) {
                for (int i = 0; i < redrawDelay; i++) {
                    Application.getIdnetManager().iterate();
                }
                updateIdnetStatistics();
            }
        });

    }

    ;

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        drawTypeButtonGroup = new javax.swing.ButtonGroup();
        topologyDrawTypeButtonGroup = new javax.swing.ButtonGroup();
        jPanel4 = new javax.swing.JPanel();
        mainTabbedPane = new javax.swing.JTabbedPane();
        linkMatrixPanel = new LinkMatrixPanel(Application.getIdnetManager());
        cogDiagramPanel = new COGDiagramPanel(Application.getIdnetManager());
        network2DPanel = new Network2DPanel(Application.getIdnetManager());
        networkTopologyPanel = new NetworkTopologyPanel(Application.getIdnetManager());
        blocksViewPanel = new javax.swing.JPanel();
        networkBlockPanel = new NetworkBlockPanel(Application.getIdnetManager());
        network1DPanel = new jidnet.gui.Network1DPanel(Application.getIdnetManager());
        clusterPanel = new javax.swing.JPanel();
        calcClustersButton = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        groupOccText = new javax.swing.JTextArea();
        calcGroupOccButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        clustersText = new javax.swing.JTextArea();
        jPanel6 = new javax.swing.JPanel();
        antigenPanel = new javax.swing.JPanel();
        buttonAntigenInsert = new javax.swing.JButton();
        antigenDiagramPanel = new AntigenDiagramPanel();
        spinnerAntigenGroup = new javax.swing.JSpinner();
        buttonAntigenRemove = new javax.swing.JButton();
        jScrollPane7 = new javax.swing.JScrollPane();
        textAreaAntigen = new javax.swing.JTextArea();
        jButton3 = new javax.swing.JButton();
        configurationsPanel = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel28 = new javax.swing.JLabel();
        spinnerPrepareGroupCount = new javax.swing.JSpinner();
        spinnerPrepareFillGroup = new javax.swing.JSpinner();
        prepareNetworkButton = new javax.swing.JButton();
        prepareNetworkFillGroupButton = new javax.swing.JButton();
        prepareNetworkAltCheckBox = new javax.swing.JCheckBox();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        configurationFilesList = new javax.swing.JList();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jScrollPane5 = new javax.swing.JScrollPane();
        configurationCommentLabel = new javax.swing.JTextArea();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane8 = new javax.swing.JScrollPane();
        networkFilesList = new javax.swing.JList();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jScrollPane9 = new javax.swing.JScrollPane();
        networkCommentLabel = new javax.swing.JTextArea();
        parameterPanel = new javax.swing.JPanel();
        parameterTabPane = new javax.swing.JTabbedPane();
        paramaterDetailsPanel = new javax.swing.JPanel();
        spinnerRedrawDelay = new javax.swing.JSpinner();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        tLabel = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        spinnerp = new javax.swing.JSpinner();
        jLabel4 = new javax.swing.JLabel();
        spinnert_l = new javax.swing.JSpinner();
        jLabel5 = new javax.swing.JLabel();
        spinnert_u = new javax.swing.JSpinner();
        spinnerMax_s = new javax.swing.JSpinner();
        jLabel6 = new javax.swing.JLabel();
        spinnerN = new javax.swing.JSpinner();
        jLabel7 = new javax.swing.JLabel();
        spinnerTimerDelay = new javax.swing.JSpinner();
        jLabel27 = new javax.swing.JLabel();
        spinnerSeed = new javax.swing.JSpinner();
        jLabel26 = new javax.swing.JLabel();
        linkWeightingPanel = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        spinnerLinkW0 = new javax.swing.JSpinner();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel12 = new javax.swing.JLabel();
        spinnerLinkW1 = new javax.swing.JSpinner();
        spinnerLinkW2 = new javax.swing.JSpinner();
        jLabel13 = new javax.swing.JLabel();
        spinnerLinkW3 = new javax.swing.JSpinner();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        spinnerLinkW4 = new javax.swing.JSpinner();
        jLabel16 = new javax.swing.JLabel();
        spinnerLinkW5 = new javax.swing.JSpinner();
        spinnerLinkW6 = new javax.swing.JSpinner();
        jLabel17 = new javax.swing.JLabel();
        spinnerLinkW7 = new javax.swing.JSpinner();
        jLabel18 = new javax.swing.JLabel();
        spinnerLinkW8 = new javax.swing.JSpinner();
        jLabel19 = new javax.swing.JLabel();
        spinnerLinkW9 = new javax.swing.JSpinner();
        jLabel20 = new javax.swing.JLabel();
        spinnerLinkW11 = new javax.swing.JSpinner();
        spinnerLinkW10 = new javax.swing.JSpinner();
        jLabel21 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        spinnerp_deadly = new javax.swing.JSpinner();
        setp_deadlyButton = new javax.swing.JButton();
        detBitsPanel = new javax.swing.JPanel();
        jLabel24 = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        jLabel30 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        detBitsList = new javax.swing.JList();
        detBitsUpButton = new javax.swing.JButton();
        detBitsDownButton = new javax.swing.JButton();
        textCustomBitMask = new javax.swing.JTextField();
        textCustomBitValues = new javax.swing.JTextField();
        detBitsResetButton = new javax.swing.JButton();
        blocksPanel = new javax.swing.JPanel();
        jScrollPane6 = new javax.swing.JScrollPane();
        blocksArea = new javax.swing.JTextArea();
        jButton2 = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        menuItemRun = new javax.swing.JCheckBoxMenuItem();
        menuItemStep = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        menuItemReseed = new javax.swing.JMenuItem();
        menuItemReset = new javax.swing.JMenuItem();
        menuItemRecalc = new javax.swing.JMenuItem();
        menuItemReseedAndReset = new javax.swing.JMenuItem();
        jMenuItem7 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        menuItemExtNeighbourStat = new javax.swing.JCheckBoxMenuItem();
        jMenuItem11 = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        jCheckBoxMenuItem1 = new javax.swing.JCheckBoxMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        menuItemSaveSnapshot = new javax.swing.JMenuItem();
        menuItemDrawMeans = new javax.swing.JCheckBoxMenuItem();
        menuItemDrawDetBits = new javax.swing.JCheckBoxMenuItem();
        menuItemFullscreen = new javax.swing.JCheckBoxMenuItem();
        jMenuItem10 = new javax.swing.JMenuItem();
        menuItemViewShowNeighbourMeans = new javax.swing.JCheckBoxMenuItem();
        jMenu4 = new javax.swing.JMenu();
        menuStat_d = new javax.swing.JMenu();
        jMenuItem9 = new javax.swing.JMenuItem();
        menuStat_p = new javax.swing.JMenu();
        jMenuItem8 = new javax.swing.JMenuItem();
        menuStat_t = new javax.swing.JMenu();
        menuStatTotalOcc = new javax.swing.JMenu();
        menuStatEntropy = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Idiotypic Network");
        setName("jIdNetFrame"); // NOI18N
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                formKeyTyped(evt);
            }
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
        });
        getContentPane().setLayout(new javax.swing.BoxLayout(getContentPane(), javax.swing.BoxLayout.Y_AXIS));

        mainTabbedPane.setTabLayoutPolicy(javax.swing.JTabbedPane.SCROLL_TAB_LAYOUT);
        mainTabbedPane.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                mainTabbedPaneComponentShown(evt);
            }
        });

        linkMatrixPanel.setBackground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout linkMatrixPanelLayout = new javax.swing.GroupLayout(linkMatrixPanel);
        linkMatrixPanel.setLayout(linkMatrixPanelLayout);
        linkMatrixPanelLayout.setHorizontalGroup(
            linkMatrixPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 736, Short.MAX_VALUE)
        );
        linkMatrixPanelLayout.setVerticalGroup(
            linkMatrixPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 682, Short.MAX_VALUE)
        );

        mainTabbedPane.addTab("Link matrix", linkMatrixPanel);

        cogDiagramPanel.setBackground(new java.awt.Color(255, 255, 255));
        cogDiagramPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                panelMouseClickedPerformed(evt);
            }
        });

        javax.swing.GroupLayout cogDiagramPanelLayout = new javax.swing.GroupLayout(cogDiagramPanel);
        cogDiagramPanel.setLayout(cogDiagramPanelLayout);
        cogDiagramPanelLayout.setHorizontalGroup(
            cogDiagramPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 736, Short.MAX_VALUE)
        );
        cogDiagramPanelLayout.setVerticalGroup(
            cogDiagramPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 682, Short.MAX_VALUE)
        );

        mainTabbedPane.addTab("Center of gravity", cogDiagramPanel);

        network2DPanel.setBackground(new java.awt.Color(255, 255, 255));
        network2DPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                panelMouseClickedPerformed(evt);
            }
        });

        javax.swing.GroupLayout network2DPanelLayout = new javax.swing.GroupLayout(network2DPanel);
        network2DPanel.setLayout(network2DPanelLayout);
        network2DPanelLayout.setHorizontalGroup(
            network2DPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 736, Short.MAX_VALUE)
        );
        network2DPanelLayout.setVerticalGroup(
            network2DPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 682, Short.MAX_VALUE)
        );

        mainTabbedPane.addTab("2D View", network2DPanel);

        networkTopologyPanel.setBackground(new java.awt.Color(255, 255, 255));
        networkTopologyPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                panelMouseClickedPerformed(evt);
            }
        });

        javax.swing.GroupLayout networkTopologyPanelLayout = new javax.swing.GroupLayout(networkTopologyPanel);
        networkTopologyPanel.setLayout(networkTopologyPanelLayout);
        networkTopologyPanelLayout.setHorizontalGroup(
            networkTopologyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 736, Short.MAX_VALUE)
        );
        networkTopologyPanelLayout.setVerticalGroup(
            networkTopologyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 682, Short.MAX_VALUE)
        );

        mainTabbedPane.addTab("Topology", networkTopologyPanel);

        networkBlockPanel.setBackground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout networkBlockPanelLayout = new javax.swing.GroupLayout(networkBlockPanel);
        networkBlockPanel.setLayout(networkBlockPanelLayout);
        networkBlockPanelLayout.setHorizontalGroup(
            networkBlockPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 736, Short.MAX_VALUE)
        );
        networkBlockPanelLayout.setVerticalGroup(
            networkBlockPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 682, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout blocksViewPanelLayout = new javax.swing.GroupLayout(blocksViewPanel);
        blocksViewPanel.setLayout(blocksViewPanelLayout);
        blocksViewPanelLayout.setHorizontalGroup(
            blocksViewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(networkBlockPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        blocksViewPanelLayout.setVerticalGroup(
            blocksViewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(networkBlockPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        mainTabbedPane.addTab("Blocks View", blocksViewPanel);

        network1DPanel.setBackground(new java.awt.Color(255, 255, 255));
        network1DPanel.setName("network1DPanel"); // NOI18N
        network1DPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                panelMouseClickedPerformed(evt);
            }
        });

        javax.swing.GroupLayout network1DPanelLayout = new javax.swing.GroupLayout(network1DPanel);
        network1DPanel.setLayout(network1DPanelLayout);
        network1DPanelLayout.setHorizontalGroup(
            network1DPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 736, Short.MAX_VALUE)
        );
        network1DPanelLayout.setVerticalGroup(
            network1DPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 682, Short.MAX_VALUE)
        );

        mainTabbedPane.addTab("1D View", network1DPanel);

        calcClustersButton.setMnemonic('u');
        calcClustersButton.setText("Calc clusters");
        calcClustersButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                calcClustersButtonActionPerformed(evt);
            }
        });

        groupOccText.setEditable(false);
        jScrollPane3.setViewportView(groupOccText);

        calcGroupOccButton.setMnemonic('g');
        calcGroupOccButton.setText("Calculate group occupations");
        calcGroupOccButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                calcGroupOccButtonActionPerformed(evt);
            }
        });

        clustersText.setEditable(false);
        jScrollPane2.setViewportView(clustersText);

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 286, Short.MAX_VALUE)
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout clusterPanelLayout = new javax.swing.GroupLayout(clusterPanel);
        clusterPanel.setLayout(clusterPanelLayout);
        clusterPanelLayout.setHorizontalGroup(
            clusterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(clusterPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(clusterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(calcClustersButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 202, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(clusterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(calcGroupOccButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        clusterPanelLayout.setVerticalGroup(
            clusterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(clusterPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(clusterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(clusterPanelLayout.createSequentialGroup()
                        .addGroup(clusterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 306, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(clusterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(calcClustersButton)
                            .addComponent(calcGroupOccButton))))
                .addGap(329, 329, 329))
        );

        mainTabbedPane.addTab("Clusters / Groups", clusterPanel);

        buttonAntigenInsert.setText("Insert antigen in group S_");
        buttonAntigenInsert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAntigenInsertActionPerformed(evt);
            }
        });

        antigenDiagramPanel.setBackground(new java.awt.Color(255, 255, 255));
        antigenDiagramPanel.setBorder(javax.swing.BorderFactory.createLineBorder(javax.swing.UIManager.getDefaults().getColor("InternalFrame.borderShadow")));

        javax.swing.GroupLayout antigenDiagramPanelLayout = new javax.swing.GroupLayout(antigenDiagramPanel);
        antigenDiagramPanel.setLayout(antigenDiagramPanelLayout);
        antigenDiagramPanelLayout.setHorizontalGroup(
            antigenDiagramPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 710, Short.MAX_VALUE)
        );
        antigenDiagramPanelLayout.setVerticalGroup(
            antigenDiagramPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 478, Short.MAX_VALUE)
        );

        spinnerAntigenGroup.setModel(new javax.swing.SpinnerNumberModel());

        buttonAntigenRemove.setText("Remove last antigen");
        buttonAntigenRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAntigenRemoveActionPerformed(evt);
            }
        });

        textAreaAntigen.setColumns(20);
        textAreaAntigen.setRows(5);
        jScrollPane7.setViewportView(textAreaAntigen);

        jButton3.setText("Insert from clipboard");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout antigenPanelLayout = new javax.swing.GroupLayout(antigenPanel);
        antigenPanel.setLayout(antigenPanelLayout);
        antigenPanelLayout.setHorizontalGroup(
            antigenPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, antigenPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(antigenPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(antigenDiagramPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane7, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 712, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, antigenPanelLayout.createSequentialGroup()
                        .addComponent(buttonAntigenInsert)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(spinnerAntigenGroup, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(buttonAntigenRemove)))
                .addContainerGap())
        );
        antigenPanelLayout.setVerticalGroup(
            antigenPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(antigenPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(antigenPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonAntigenInsert)
                    .addComponent(spinnerAntigenGroup, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton3)
                    .addComponent(buttonAntigenRemove))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(antigenDiagramPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        mainTabbedPane.addTab("Antigens", antigenPanel);

        configurationsPanel.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                configurationsPanelComponentShown(evt);
            }
        });

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Prepare network"));

        jLabel28.setText("d_m =");

        spinnerPrepareGroupCount.setModel(new javax.swing.SpinnerNumberModel(2, 1, 12, 1));

        spinnerPrepareFillGroup.setModel(new javax.swing.SpinnerNumberModel(0, 0, 12, 1));

        prepareNetworkButton.setText("Prepare network");
        prepareNetworkButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                prepareNetworkButtonActionPerformed(evt);
            }
        });

        prepareNetworkFillGroupButton.setText("Fill group S_");
        prepareNetworkFillGroupButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                prepareNetworkFillGroupButtonActionPerformed(evt);
            }
        });

        prepareNetworkAltCheckBox.setText("Alternative");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(prepareNetworkFillGroupButton, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel28))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(spinnerPrepareGroupCount)
                    .addComponent(spinnerPrepareFillGroup, javax.swing.GroupLayout.DEFAULT_SIZE, 68, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(prepareNetworkAltCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(prepareNetworkButton, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(124, 124, 124))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel28)
                    .addComponent(spinnerPrepareGroupCount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(prepareNetworkAltCheckBox)
                    .addComponent(prepareNetworkButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(prepareNetworkFillGroupButton)
                    .addComponent(spinnerPrepareFillGroup, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Configuration"));
        jPanel3.setPreferredSize(new java.awt.Dimension(568, 220));

        configurationFilesList.setModel(new DefaultListModel());
        configurationFilesList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        configurationFilesList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                configurationFilesListValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(configurationFilesList);

        jButton4.setText("Reset & Load");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setText("Save current");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        configurationCommentLabel.setColumns(20);
        configurationCommentLabel.setEditable(false);
        configurationCommentLabel.setLineWrap(true);
        configurationCommentLabel.setRows(5);
        configurationCommentLabel.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        jScrollPane5.setViewportView(configurationCommentLabel);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jButton4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 150, Short.MAX_VALUE)
                        .addComponent(jButton5))
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 342, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 181, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 146, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton4)
                            .addComponent(jButton5))))
                .addContainerGap())
        );

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder("Network"));
        jPanel5.setPreferredSize(new java.awt.Dimension(568, 220));

        networkFilesList.setModel(new DefaultListModel());
        networkFilesList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        networkFilesList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                networkFilesListValueChanged(evt);
            }
        });
        jScrollPane8.setViewportView(networkFilesList);

        jButton6.setText("Reset & Load");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jButton7.setText("Save current");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        networkCommentLabel.setColumns(20);
        networkCommentLabel.setEditable(false);
        networkCommentLabel.setRows(5);
        networkCommentLabel.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        jScrollPane9.setViewportView(networkCommentLabel);

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jButton6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 150, Short.MAX_VALUE)
                        .addComponent(jButton7))
                    .addComponent(jScrollPane9, javax.swing.GroupLayout.DEFAULT_SIZE, 342, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane8, javax.swing.GroupLayout.DEFAULT_SIZE, 181, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                        .addComponent(jScrollPane9, javax.swing.GroupLayout.DEFAULT_SIZE, 146, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton6)
                            .addComponent(jButton7))))
                .addContainerGap())
        );

        javax.swing.GroupLayout configurationsPanelLayout = new javax.swing.GroupLayout(configurationsPanel);
        configurationsPanel.setLayout(configurationsPanelLayout);
        configurationsPanelLayout.setHorizontalGroup(
            configurationsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(configurationsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(configurationsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jPanel5, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 568, Short.MAX_VALUE))
                .addContainerGap(156, Short.MAX_VALUE))
        );
        configurationsPanelLayout.setVerticalGroup(
            configurationsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(configurationsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(115, Short.MAX_VALUE))
        );

        mainTabbedPane.addTab("Configurations", configurationsPanel);

        parameterPanel.setBorder(null);

        paramaterDetailsPanel.setPreferredSize(new java.awt.Dimension(681, 163));

        spinnerRedrawDelay.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(10), Integer.valueOf(1), null, Integer.valueOf(1)));
        spinnerRedrawDelay.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spinnerRedrawDelayStateChanged(evt);
            }
        });

        jLabel1.setText("Redraw Delay");

        jLabel2.setText("t =");

        tLabel.setText("0");

        jLabel3.setText("p =");

        spinnerp.setModel(new javax.swing.SpinnerNumberModel(0.0d, 0.0d, 1.0d, 0.0010d));
        spinnerp.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spinnerpStateChanged(evt);
            }
        });

        jLabel4.setText("t_l =");

        spinnert_l.setModel(new javax.swing.SpinnerNumberModel(Double.valueOf(0.0d), Double.valueOf(0.0d), null, Double.valueOf(1.0d)));
        spinnert_l.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spinnert_lStateChanged(evt);
            }
        });

        jLabel5.setText("t_u =");

        spinnert_u.setModel(new javax.swing.SpinnerNumberModel(Double.valueOf(0.0d), Double.valueOf(0.0d), null, Double.valueOf(1.0d)));
        spinnert_u.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spinnert_uStateChanged(evt);
            }
        });

        spinnerMax_s.setModel(new javax.swing.SpinnerNumberModel(Double.valueOf(0.0d), Double.valueOf(0.0d), null, Double.valueOf(0.01d)));
        spinnerMax_s.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spinnerMax_sStateChanged(evt);
            }
        });

        jLabel6.setText("max_s =");

        spinnerN.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(1), Integer.valueOf(1), null, Integer.valueOf(1)));
        spinnerN.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spinnerNStateChanged(evt);
            }
        });

        jLabel7.setText("N =");

        spinnerTimerDelay.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(10), Integer.valueOf(1), null, Integer.valueOf(10)));
        spinnerTimerDelay.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spinnerTimerDelayStateChanged(evt);
            }
        });
        spinnerTimerDelay.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                spinnerTimerDelayKeyPressed(evt);
            }
        });

        jLabel27.setText("Timer Delay");

        spinnerSeed.setModel(new javax.swing.SpinnerNumberModel(Long.valueOf(0L), null, null, Long.valueOf(1L)));
        spinnerSeed.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spinnerSeedStateChanged(evt);
            }
        });

        jLabel26.setText("seed =");

        javax.swing.GroupLayout paramaterDetailsPanelLayout = new javax.swing.GroupLayout(paramaterDetailsPanel);
        paramaterDetailsPanel.setLayout(paramaterDetailsPanelLayout);
        paramaterDetailsPanelLayout.setHorizontalGroup(
            paramaterDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(paramaterDetailsPanelLayout.createSequentialGroup()
                .addGroup(paramaterDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(paramaterDetailsPanelLayout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addGroup(paramaterDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5)
                            .addComponent(jLabel7)
                            .addComponent(jLabel6)
                            .addComponent(jLabel27))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 97, Short.MAX_VALUE)
                        .addGroup(paramaterDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(spinnerTimerDelay)
                            .addComponent(tLabel, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(spinnerp, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(spinnert_l, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(spinnert_u, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(spinnerN, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(spinnerMax_s, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(spinnerRedrawDelay, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 66, Short.MAX_VALUE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, paramaterDetailsPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel26)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 62, Short.MAX_VALUE)
                        .addComponent(spinnerSeed, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        paramaterDetailsPanelLayout.setVerticalGroup(
            paramaterDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(paramaterDetailsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(paramaterDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(spinnerTimerDelay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel27))
                .addGap(18, 18, 18)
                .addGroup(paramaterDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(spinnerRedrawDelay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(18, 18, 18)
                .addGroup(paramaterDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(tLabel))
                .addGap(18, 18, 18)
                .addGroup(paramaterDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(spinnerp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(paramaterDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(spinnert_l, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(paramaterDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(spinnert_u, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(paramaterDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(spinnerN, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addGap(18, 18, 18)
                .addGroup(paramaterDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(spinnerMax_s, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 264, Short.MAX_VALUE)
                .addGroup(paramaterDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(spinnerSeed, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel26))
                .addContainerGap())
        );

        parameterTabPane.addTab("Parameters", paramaterDetailsPanel);

        jLabel9.setText("Missmatches");

        jLabel10.setText("Link weighting");

        jLabel11.setText("0");

        spinnerLinkW0.setModel(new javax.swing.SpinnerNumberModel(Double.valueOf(0.0d), Double.valueOf(0.0d), null, Double.valueOf(0.1d)));
        spinnerLinkW0.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spinnerLinkWeightingChanged(evt);
            }
        });

        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);

        jLabel12.setText("1");

        spinnerLinkW1.setModel(new javax.swing.SpinnerNumberModel(Double.valueOf(0.0d), Double.valueOf(0.0d), null, Double.valueOf(0.1d)));
        spinnerLinkW1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spinnerLinkWeightingChanged(evt);
            }
        });

        spinnerLinkW2.setModel(new javax.swing.SpinnerNumberModel(Double.valueOf(0.0d), Double.valueOf(0.0d), null, Double.valueOf(0.1d)));
        spinnerLinkW2.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spinnerLinkWeightingChanged(evt);
            }
        });

        jLabel13.setText("2");

        spinnerLinkW3.setModel(new javax.swing.SpinnerNumberModel(Double.valueOf(0.0d), Double.valueOf(0.0d), null, Double.valueOf(0.1d)));
        spinnerLinkW3.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spinnerLinkWeightingChanged(evt);
            }
        });

        jLabel14.setText("3");

        jLabel15.setText("4");

        spinnerLinkW4.setModel(new javax.swing.SpinnerNumberModel(Double.valueOf(0.0d), Double.valueOf(0.0d), null, Double.valueOf(0.1d)));
        spinnerLinkW4.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spinnerLinkWeightingChanged(evt);
            }
        });

        jLabel16.setText("5");

        spinnerLinkW5.setModel(new javax.swing.SpinnerNumberModel(Double.valueOf(0.0d), Double.valueOf(0.0d), null, Double.valueOf(0.1d)));
        spinnerLinkW5.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spinnerLinkWeightingChanged(evt);
            }
        });

        spinnerLinkW6.setModel(new javax.swing.SpinnerNumberModel(Double.valueOf(0.0d), Double.valueOf(0.0d), null, Double.valueOf(0.1d)));
        spinnerLinkW6.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spinnerLinkWeightingChanged(evt);
            }
        });

        jLabel17.setText("6");

        spinnerLinkW7.setModel(new javax.swing.SpinnerNumberModel(Double.valueOf(0.0d), Double.valueOf(0.0d), null, Double.valueOf(0.1d)));
        spinnerLinkW7.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spinnerLinkWeightingChanged(evt);
            }
        });

        jLabel18.setText("7");

        spinnerLinkW8.setModel(new javax.swing.SpinnerNumberModel(Double.valueOf(0.0d), Double.valueOf(0.0d), null, Double.valueOf(0.1d)));
        spinnerLinkW8.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spinnerLinkWeightingChanged(evt);
            }
        });

        jLabel19.setText("8");

        spinnerLinkW9.setModel(new javax.swing.SpinnerNumberModel(Double.valueOf(0.0d), Double.valueOf(0.0d), null, Double.valueOf(0.1d)));
        spinnerLinkW9.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spinnerLinkWeightingChanged(evt);
            }
        });

        jLabel20.setText("9");

        spinnerLinkW11.setModel(new javax.swing.SpinnerNumberModel(Double.valueOf(0.0d), Double.valueOf(0.0d), null, Double.valueOf(0.1d)));
        spinnerLinkW11.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spinnerLinkWeightingChanged(evt);
            }
        });

        spinnerLinkW10.setModel(new javax.swing.SpinnerNumberModel(Double.valueOf(0.0d), Double.valueOf(0.0d), null, Double.valueOf(0.1d)));
        spinnerLinkW10.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spinnerLinkWeightingChanged(evt);
            }
        });

        jLabel21.setText("10");

        jLabel22.setText("11");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel9)
                .addGap(42, 42, 42)
                .addComponent(jLabel10)
                .addGap(32, 32, 32))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(76, 76, 76)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel22, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel12, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel13, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel14, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel15, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel16, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel17, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel18, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel19, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel21, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel20, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel11, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(spinnerLinkW11, javax.swing.GroupLayout.DEFAULT_SIZE, 131, Short.MAX_VALUE)
                    .addComponent(spinnerLinkW0, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 131, Short.MAX_VALUE)
                    .addComponent(spinnerLinkW1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 131, Short.MAX_VALUE)
                    .addComponent(spinnerLinkW2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 131, Short.MAX_VALUE)
                    .addComponent(spinnerLinkW3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 131, Short.MAX_VALUE)
                    .addComponent(spinnerLinkW4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 131, Short.MAX_VALUE)
                    .addComponent(spinnerLinkW5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 131, Short.MAX_VALUE)
                    .addComponent(spinnerLinkW6, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 131, Short.MAX_VALUE)
                    .addComponent(spinnerLinkW7, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 131, Short.MAX_VALUE)
                    .addComponent(spinnerLinkW8, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 131, Short.MAX_VALUE)
                    .addComponent(spinnerLinkW10, javax.swing.GroupLayout.DEFAULT_SIZE, 131, Short.MAX_VALUE)
                    .addComponent(spinnerLinkW9, javax.swing.GroupLayout.DEFAULT_SIZE, 131, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel9)
                    .addComponent(jLabel10))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(spinnerLinkW0, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel11))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(spinnerLinkW1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel12))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(spinnerLinkW2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel13))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(spinnerLinkW3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel14))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(spinnerLinkW4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel15))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(spinnerLinkW5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel16))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(spinnerLinkW6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel17))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(spinnerLinkW7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel18))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(spinnerLinkW8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel19))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(spinnerLinkW9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel20))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(spinnerLinkW10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel21))
                        .addGap(12, 12, 12)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(spinnerLinkW11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel22))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel23.setText("Propability of mismatch being deadly:");

        spinnerp_deadly.setModel(new javax.swing.SpinnerNumberModel(0.3d, 0.0d, 1.0d, 0.1d));

        setp_deadlyButton.setText("Calculate");
        setp_deadlyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setp_deadlyButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout linkWeightingPanelLayout = new javax.swing.GroupLayout(linkWeightingPanel);
        linkWeightingPanel.setLayout(linkWeightingPanelLayout);
        linkWeightingPanelLayout.setHorizontalGroup(
            linkWeightingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(linkWeightingPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(linkWeightingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel23)
                    .addGroup(linkWeightingPanelLayout.createSequentialGroup()
                        .addComponent(spinnerp_deadly, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(setp_deadlyButton, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        linkWeightingPanelLayout.setVerticalGroup(
            linkWeightingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(linkWeightingPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel23)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(linkWeightingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(spinnerp_deadly, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(setp_deadlyButton))
                .addContainerGap(58, Short.MAX_VALUE))
        );

        parameterTabPane.addTab("Link weighting", linkWeightingPanel);

        detBitsPanel.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentHidden(java.awt.event.ComponentEvent evt) {
                detBitsPanelComponentHidden(evt);
            }
        });

        jLabel24.setText("mask = ");

        jLabel25.setText("values =");

        jLabel30.setText("order =");

        detBitsList.setFont(new java.awt.Font("Courier New", 1, 18));
        detBitsList.setModel(new DefaultListModel());
        detBitsList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane4.setViewportView(detBitsList);

        detBitsUpButton.setMnemonic('u');
        detBitsUpButton.setText("Up");
        detBitsUpButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                detBitsUpButtonActionPerformed(evt);
            }
        });

        detBitsDownButton.setMnemonic('o');
        detBitsDownButton.setText("Down");
        detBitsDownButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                detBitsDownButtonActionPerformed(evt);
            }
        });

        textCustomBitMask.setFont(new java.awt.Font("Courier New", 1, 18));
        textCustomBitMask.setText("000000000000");
        textCustomBitMask.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        textCustomBitMask.setInputVerifier(new InputVerifier() {
            public boolean verify(JComponent input) {
                JTextField tf = (JTextField) input;
                if (tf.getText().length() != Application.getIdnetManager().getd())
                return false;
                for (int i = 0; i < tf.getText().length(); i++)
                if (tf.getText().charAt(i) != '0' && tf.getText().charAt(i) != '1')
                return false;
                return true;
            }
        });

        textCustomBitValues.setFont(new java.awt.Font("Courier New", 1, 18));
        textCustomBitValues.setText("000000000000");
        textCustomBitValues.setInputVerifier(textCustomBitMask.getInputVerifier());

        detBitsResetButton.setText("Reset");
        detBitsResetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                detBitsResetButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout detBitsPanelLayout = new javax.swing.GroupLayout(detBitsPanel);
        detBitsPanel.setLayout(detBitsPanelLayout);
        detBitsPanelLayout.setHorizontalGroup(
            detBitsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(detBitsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(detBitsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel24)
                    .addComponent(jLabel25)
                    .addComponent(jLabel30))
                .addGap(18, 18, 18)
                .addGroup(detBitsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(textCustomBitValues)
                    .addComponent(textCustomBitMask)
                    .addGroup(detBitsPanelLayout.createSequentialGroup()
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(detBitsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(detBitsResetButton, javax.swing.GroupLayout.DEFAULT_SIZE, 94, Short.MAX_VALUE)
                            .addComponent(detBitsDownButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(detBitsUpButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap(55, Short.MAX_VALUE))
        );
        detBitsPanelLayout.setVerticalGroup(
            detBitsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(detBitsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(detBitsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel24)
                    .addComponent(textCustomBitMask, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(detBitsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel25)
                    .addComponent(textCustomBitValues, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(detBitsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(detBitsPanelLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 393, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(detBitsPanelLayout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addComponent(jLabel30))
                    .addGroup(detBitsPanelLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(detBitsUpButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(detBitsDownButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(detBitsResetButton)))
                .addContainerGap(176, Short.MAX_VALUE))
        );

        parameterTabPane.addTab("Determinant bits", detBitsPanel);

        blocksArea.setColumns(20);
        blocksArea.setRows(5);
        jScrollPane6.setViewportView(blocksArea);

        jButton2.setText("Draw blocks");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout blocksPanelLayout = new javax.swing.GroupLayout(blocksPanel);
        blocksPanel.setLayout(blocksPanelLayout);
        blocksPanelLayout.setHorizontalGroup(
            blocksPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(blocksPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(blocksPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane6, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 259, Short.MAX_VALUE)
                    .addComponent(jButton2))
                .addContainerGap())
        );
        blocksPanelLayout.setVerticalGroup(
            blocksPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(blocksPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 596, Short.MAX_VALUE)
                .addContainerGap())
        );

        parameterTabPane.addTab("Blocks", blocksPanel);

        javax.swing.GroupLayout parameterPanelLayout = new javax.swing.GroupLayout(parameterPanel);
        parameterPanel.setLayout(parameterPanelLayout);
        parameterPanelLayout.setHorizontalGroup(
            parameterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(parameterTabPane, javax.swing.GroupLayout.DEFAULT_SIZE, 291, Short.MAX_VALUE)
        );
        parameterPanelLayout.setVerticalGroup(
            parameterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(parameterTabPane, javax.swing.GroupLayout.DEFAULT_SIZE, 719, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addComponent(mainTabbedPane, javax.swing.GroupLayout.DEFAULT_SIZE, 744, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(parameterPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(parameterPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(mainTabbedPane, javax.swing.GroupLayout.DEFAULT_SIZE, 719, Short.MAX_VALUE)
        );

        getContentPane().add(jPanel4);

        jMenu1.setText("Run");
        jMenu1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenu1ActionPerformed(evt);
            }
        });

        menuItemRun.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_R, java.awt.event.InputEvent.ALT_MASK));
        menuItemRun.setText("Running");
        menuItemRun.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemRunActionPerformed(evt);
            }
        });
        jMenu1.add(menuItemRun);

        menuItemStep.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_I, java.awt.event.InputEvent.ALT_MASK));
        menuItemStep.setText("Step");
        menuItemStep.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemStepActionPerformed(evt);
            }
        });
        jMenu1.add(menuItemStep);

        jMenuItem4.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Q, java.awt.event.InputEvent.ALT_MASK));
        jMenuItem4.setText("Step n times...");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem4);

        menuItemReseed.setText("Reseed");
        menuItemReseed.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemReseedActionPerformed(evt);
            }
        });
        jMenu1.add(menuItemReseed);

        menuItemReset.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_T, java.awt.event.InputEvent.ALT_MASK));
        menuItemReset.setText("Reset");
        menuItemReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemResetActionPerformed(evt);
            }
        });
        jMenu1.add(menuItemReset);

        menuItemRecalc.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.ALT_MASK));
        menuItemRecalc.setText("Recalc");
        menuItemRecalc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemRecalcActionPerformed(evt);
            }
        });
        jMenu1.add(menuItemRecalc);

        menuItemReseedAndReset.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.ALT_MASK));
        menuItemReseedAndReset.setText("Reseed & reset");
        menuItemReseedAndReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemReseedAndResetActionPerformed(evt);
            }
        });
        jMenu1.add(menuItemReseedAndReset);

        jMenuItem7.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.ALT_MASK));
        jMenuItem7.setText("Recalc det. bits");
        jMenuItem7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem7ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem7);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Network");

        menuItemExtNeighbourStat.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.ALT_MASK));
        menuItemExtNeighbourStat.setText("Extended neighbour statistics");
        menuItemExtNeighbourStat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemExtNeighbourStatActionPerformed(evt);
            }
        });
        jMenu2.add(menuItemExtNeighbourStat);

        jMenuItem11.setText("Export topology data...");
        jMenuItem11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem11ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem11);

        jMenuBar1.add(jMenu2);

        jMenu3.setText("View");

        jCheckBoxMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.ALT_MASK));
        jCheckBoxMenuItem1.setText("Show parameter panel");
        jCheckBoxMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxMenuItem1ActionPerformed(evt);
            }
        });
        jMenu3.add(jCheckBoxMenuItem1);

        jMenuItem2.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_K, java.awt.event.InputEvent.ALT_MASK));
        jMenuItem2.setText("Previous tab");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem2);

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_L, java.awt.event.InputEvent.ALT_MASK));
        jMenuItem1.setText("Next tab");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem1);

        jMenuItem3.setText("Show COG window");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem3);

        menuItemSaveSnapshot.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_I, java.awt.event.InputEvent.CTRL_MASK));
        menuItemSaveSnapshot.setText("Save snapshot picture");
        menuItemSaveSnapshot.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemSaveSnapshotActionPerformed(evt);
            }
        });
        jMenu3.add(menuItemSaveSnapshot);

        menuItemDrawMeans.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_M, java.awt.event.InputEvent.ALT_MASK));
        menuItemDrawMeans.setText("Draw means");
        menuItemDrawMeans.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemDrawMeansActionPerformed(evt);
            }
        });
        jMenu3.add(menuItemDrawMeans);

        menuItemDrawDetBits.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_D, java.awt.event.InputEvent.ALT_MASK));
        menuItemDrawDetBits.setText("Determinant bits");
        menuItemDrawDetBits.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemDrawDetBitsActionPerformed(evt);
            }
        });
        jMenu3.add(menuItemDrawDetBits);

        menuItemFullscreen.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F, java.awt.event.InputEvent.ALT_MASK));
        menuItemFullscreen.setText("Fullscreen");
        menuItemFullscreen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemFullscreenActionPerformed(evt);
            }
        });
        jMenu3.add(menuItemFullscreen);

        jMenuItem10.setText("Set node size...");
        jMenuItem10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem10ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem10);

        menuItemViewShowNeighbourMeans.setText("Show neighbour means");
        menuItemViewShowNeighbourMeans.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemViewShowNeighbourMeansActionPerformed(evt);
            }
        });
        jMenu3.add(menuItemViewShowNeighbourMeans);

        jMenuBar1.add(jMenu3);

        jMenu4.setText("               ");
        jMenu4.setEnabled(false);
        jMenuBar1.add(jMenu4);

        menuStat_d.setText("d = 12");

        jMenuItem9.setText("Set d...");
        jMenuItem9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem9ActionPerformed(evt);
            }
        });
        menuStat_d.add(jMenuItem9);

        jMenuBar1.add(menuStat_d);

        menuStat_p.setText("p = 0");
        menuStat_p.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuStat_pActionPerformed(evt);
            }
        });

        jMenuItem8.setText("Set p...");
        jMenuItem8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem8ActionPerformed(evt);
            }
        });
        menuStat_p.add(jMenuItem8);

        jMenuBar1.add(menuStat_p);

        menuStat_t.setText("t = 0");
        menuStat_t.setFocusable(false);
        jMenuBar1.add(menuStat_t);

        menuStatTotalOcc.setText("total occ. = 0");
        jMenuBar1.add(menuStatTotalOcc);

        menuStatEntropy.setText("S = 0.0");
        jMenuBar1.add(menuStatEntropy);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public final void updateParamSpinners() {
        menuStat_d.setText("d = " + Application.getIdnetManager().getd());
        menuStat_p.setText("p = " + Math.round(Application.getIdnetManager().getp() * 100000) / 100000.);
        spinnerp.setValue(Application.getIdnetManager().getp());
        spinnert_l.setValue(Application.getIdnetManager().gett_l());
        spinnert_u.setValue(Application.getIdnetManager().gett_u());
        spinnerN.setValue(Application.getIdnetManager().getN());
        spinnerSeed.setValue(Application.getIdnetManager().getSeed());

        spinnerLinkW0.setValue(Application.getIdnetManager().getLinkWeighting(0));
        spinnerLinkW1.setValue(Application.getIdnetManager().getLinkWeighting(1));
        spinnerLinkW2.setValue(Application.getIdnetManager().getLinkWeighting(2));
        spinnerLinkW3.setValue(Application.getIdnetManager().getLinkWeighting(3));
        spinnerLinkW4.setValue(Application.getIdnetManager().getLinkWeighting(4));
        spinnerLinkW5.setValue(Application.getIdnetManager().getLinkWeighting(5));
        spinnerLinkW6.setValue(Application.getIdnetManager().getLinkWeighting(6));
        spinnerLinkW7.setValue(Application.getIdnetManager().getLinkWeighting(7));
        spinnerLinkW8.setValue(Application.getIdnetManager().getLinkWeighting(8));
        spinnerLinkW9.setValue(Application.getIdnetManager().getLinkWeighting(9));
        spinnerLinkW10.setValue(Application.getIdnetManager().getLinkWeighting(10));
        spinnerLinkW11.setValue(Application.getIdnetManager().getLinkWeighting(11));
    }

    public void updateIdnetStatistics() {
        tLabel.setText(Integer.toString(Application.getIdnetManager().gett()));
        menuStat_t.setText("t = " + Integer.toString(Application.getIdnetManager().gett()));
        menuStatTotalOcc.setText("total occ. = " + Integer.toString(Application.getIdnetManager().gettotal_sum_n()));
        double S = 0;
        for (int i = 0; i < (1 << Application.getIdnetManager().getd()); i++) {
            double p1 = (double) Application.getIdnetManager().getIdiotypes()[i].sum_n / (double) Application.getIdnetManager().gett();
            double p0 = 1 - p1;
            if (p0 != 0 && p1 != 0) {
                S += p1 * Math.log(p1) + p0 * Math.log(p0);
            }
        }
        S = -S / Math.log(2) / (1 << Application.getIdnetManager().getd());
        menuStatEntropy.setText("S = " + Math.round(S * 10000) / 10000.);
        for (Window w : getWindows()) {
            w.repaint();
        }
    }

    private void spinnerRedrawDelayStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_spinnerRedrawDelayStateChanged
        redrawDelay = ((Integer) spinnerRedrawDelay.getValue()).intValue();
        Application.getConfiguration().setProperty("redraw_delay", ((Integer) spinnerRedrawDelay.getValue()).toString());
    }//GEN-LAST:event_spinnerRedrawDelayStateChanged

    private void spinnerpStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_spinnerpStateChanged
        Application.getIdnetManager().setp((Double) spinnerp.getValue());
        updateParamSpinners();
    }//GEN-LAST:event_spinnerpStateChanged

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        Application.closing();
    }//GEN-LAST:event_formWindowClosing

    private void spinnerMax_sStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_spinnerMax_sStateChanged
        Application.getIdnetManager().setmax_s((Double) spinnerMax_s.getValue());
    }//GEN-LAST:event_spinnerMax_sStateChanged

    private void spinnerNStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_spinnerNStateChanged
        Application.getIdnetManager().setN((Integer) spinnerN.getValue());
    }//GEN-LAST:event_spinnerNStateChanged

    private void spinnerLinkWeightingChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_spinnerLinkWeightingChanged
        if (evt.getSource().equals(spinnerLinkW0)) {
            Application.getIdnetManager().setLinkWeighting(0, (Double) spinnerLinkW0.getValue());
        } else if (evt.getSource().equals(spinnerLinkW1)) {
            Application.getIdnetManager().setLinkWeighting(1, (Double) spinnerLinkW1.getValue());
        } else if (evt.getSource().equals(spinnerLinkW2)) {
            Application.getIdnetManager().setLinkWeighting(2, (Double) spinnerLinkW2.getValue());
        } else if (evt.getSource().equals(spinnerLinkW3)) {
            Application.getIdnetManager().setLinkWeighting(3, (Double) spinnerLinkW3.getValue());
        } else if (evt.getSource().equals(spinnerLinkW4)) {
            Application.getIdnetManager().setLinkWeighting(4, (Double) spinnerLinkW4.getValue());
        } else if (evt.getSource().equals(spinnerLinkW5)) {
            Application.getIdnetManager().setLinkWeighting(5, (Double) spinnerLinkW5.getValue());
        } else if (evt.getSource().equals(spinnerLinkW6)) {
            Application.getIdnetManager().setLinkWeighting(6, (Double) spinnerLinkW6.getValue());
        } else if (evt.getSource().equals(spinnerLinkW7)) {
            Application.getIdnetManager().setLinkWeighting(7, (Double) spinnerLinkW7.getValue());
        } else if (evt.getSource().equals(spinnerLinkW8)) {
            Application.getIdnetManager().setLinkWeighting(8, (Double) spinnerLinkW8.getValue());
        } else if (evt.getSource().equals(spinnerLinkW9)) {
            Application.getIdnetManager().setLinkWeighting(9, (Double) spinnerLinkW9.getValue());
        } else if (evt.getSource().equals(spinnerLinkW10)) {
            Application.getIdnetManager().setLinkWeighting(10, (Double) spinnerLinkW10.getValue());
        } else if (evt.getSource().equals(spinnerLinkW11)) {
            Application.getIdnetManager().setLinkWeighting(11, (Double) spinnerLinkW11.getValue());
        }
        updateParamSpinners();
    }//GEN-LAST:event_spinnerLinkWeightingChanged

    private void spinnerSeedStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_spinnerSeedStateChanged
        Application.getIdnetManager().reseed((Long) spinnerSeed.getValue());
    }//GEN-LAST:event_spinnerSeedStateChanged

    private void setp_deadlyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setp_deadlyButtonActionPerformed
        double[] lw = new double[12];
        double v = 1, p = (Double) spinnerp_deadly.getValue();
        for (int i = 0; i < 12; i++) {
            lw[i] = v;
            v *= (1 - p);
        }
        spinnerLinkW0.setValue(lw[0]);
        spinnerLinkW1.setValue(lw[1]);
        spinnerLinkW2.setValue(lw[2]);
        spinnerLinkW3.setValue(lw[3]);
        spinnerLinkW4.setValue(lw[4]);
        spinnerLinkW5.setValue(lw[5]);
        spinnerLinkW6.setValue(lw[6]);
        spinnerLinkW7.setValue(lw[7]);
        spinnerLinkW8.setValue(lw[8]);
        spinnerLinkW9.setValue(lw[9]);
        spinnerLinkW10.setValue(lw[10]);
        spinnerLinkW11.setValue(lw[11]);
    }//GEN-LAST:event_setp_deadlyButtonActionPerformed

    private void spinnert_lStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_spinnert_lStateChanged
        Application.getIdnetManager().sett_l((Double) spinnert_l.getValue());
    }//GEN-LAST:event_spinnert_lStateChanged

    private void spinnert_uStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_spinnert_uStateChanged
        Application.getIdnetManager().sett_u((Double) spinnert_u.getValue());
    }//GEN-LAST:event_spinnert_uStateChanged

    private void calcClustersButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_calcClustersButtonActionPerformed
        class MyComparator implements Comparator {

            public int compare(Object obj1, Object obj2) {
                int result = 0;
                Map.Entry<Integer, Integer> e1 = (Map.Entry<Integer, Integer>) obj1;
                Map.Entry<Integer, Integer> e2 = (Map.Entry<Integer, Integer>) obj2;
                Integer value1 = (Integer) e1.getKey();
                Integer value2 = (Integer) e2.getKey();

                if (value1.compareTo(value2) == 0) {
                    Integer int1 = (Integer) e1.getValue();
                    Integer int2 = (Integer) e2.getValue();
                    result = int1.compareTo(int2);
                } else {
                    result = value2.compareTo(value1);
                }

                return result;
            }
        }

        ArrayList<ArrayList<Idiotype>> clusters = Application.getIdnetManager().calcClusters();
        HashMap<Integer, Integer> clusterSizes = new HashMap<Integer, Integer>();
        for (ArrayList<Idiotype> cluster : clusters) {
            if (clusterSizes.containsKey(cluster.size())) {
                clusterSizes.put(cluster.size(), clusterSizes.get(cluster.size()) + 1);
            } else {
                clusterSizes.put(cluster.size(), 1);
            }
        }
        String text = "Clusters:\n\nSize\tNumber\n\n";

        ArrayList<Map.Entry<Integer, Integer>> myArrayList = new ArrayList<Map.Entry<Integer, Integer>>(clusterSizes.entrySet());
        Collections.sort(myArrayList, new MyComparator());


        for (Entry<Integer, Integer> e : myArrayList) {
            text += e.getKey() + "\t" + e.getValue() + "\n";
        }
        clustersText.setText(text);
    }//GEN-LAST:event_calcClustersButtonActionPerformed

    private void calcGroupOccButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_calcGroupOccButtonActionPerformed
        String text = null;
        if (!menuItemDrawMeans.isSelected()) {
            /*            Application.getIdnetManager().calcDeterminantBits();
            int d_m = Application.getIdnetManager().getd_m();
            text = "Group\tOcc.\n\n";
            for (int i = 0; i <= d_m; i++)
            text += "S_" + i + "\t" + Application.getIdnetManager().getGroupOccupation(i) + "\n";*/
        } else {
            int d_m = Application.getIdnetManager().getd_m();
            text = "Group\tMean occ.\n\n";
            for (int i = 0; i <= d_m; i++) //text += "S_" + i + "\t" + (double) ((int) (10000 * (double) Application.getIdnetManager().
            //        getTotalGroupOccs()[i] / Application.getIdnetManager().gett() / Application.getIdnetManager().
            //        calcGroupSize(i, d_m))) / 10000 + "\n";
            {
                text += "S_" + i + "\t" + (double) ((double) Application.getIdnetManager().
                        getTotalGroupOccs()[i] / Application.getIdnetManager().gett() / Application.getIdnetManager().
                        calcGroupSize(i, d_m)) + "\n";
            }
        }
        groupOccText.setText(text);
    }//GEN-LAST:event_calcGroupOccButtonActionPerformed

    private void formKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyPressed
    }//GEN-LAST:event_formKeyPressed

    private void formKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyTyped
    }//GEN-LAST:event_formKeyTyped

    private void menuItemRunActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemRunActionPerformed
        if (timer.isRunning()) {
            timer.stop();
        } else {
            timer.start();
        }
    }//GEN-LAST:event_menuItemRunActionPerformed

    private void menuItemStepActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemStepActionPerformed
        Application.getIdnetManager().iterate();
        updateIdnetStatistics();
    }//GEN-LAST:event_menuItemStepActionPerformed

    private void menuItemReseedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemReseedActionPerformed
        long seed = System.currentTimeMillis();
        spinnerSeed.setValue((Long) seed);
        Application.getIdnetManager().reseed(seed);
    }//GEN-LAST:event_menuItemReseedActionPerformed

    private void menuItemResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemResetActionPerformed
        Application.getIdnetManager().reseed((Long) spinnerSeed.getValue());
        Application.getIdnetManager().reset();
        ((NetworkTopologyPanel) networkTopologyPanel).recalc();
        updateIdnetStatistics();
    }//GEN-LAST:event_menuItemResetActionPerformed

    private void jMenu1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenu1ActionPerformed
        Application.getIdnetManager().recalc();
        ((NetworkTopologyPanel) networkTopologyPanel).recalc();
    }//GEN-LAST:event_jMenu1ActionPerformed

    private void menuItemReseedAndResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemReseedAndResetActionPerformed
        menuItemReseedActionPerformed(evt);
        menuItemResetActionPerformed(evt);
    }//GEN-LAST:event_menuItemReseedAndResetActionPerformed

    private void jCheckBoxMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxMenuItem1ActionPerformed
        parameterPanel.setVisible(!parameterPanel.isVisible());
    }//GEN-LAST:event_jCheckBoxMenuItem1ActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        mainTabbedPane.setSelectedIndex((mainTabbedPane.getSelectedIndex() + 1) % mainTabbedPane.getTabCount());
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        mainTabbedPane.setSelectedIndex((mainTabbedPane.getSelectedIndex() + mainTabbedPane.getTabCount() - 1)
                % mainTabbedPane.getTabCount());
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        final JFrame f = new JFrame("COG diagram");
        final COGDiagramPanel p = new COGDiagramPanel(Application.getIdnetManager());
        f.getContentPane().add(p);
        p.setBackground(Color.WHITE);
        f.setSize(1050, 470);
        f.setVisible(true);
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void spinnerTimerDelayStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_spinnerTimerDelayStateChanged
        timer.setDelay((Integer) spinnerTimerDelay.getValue());
    }//GEN-LAST:event_spinnerTimerDelayStateChanged

    private void panelMouseClickedPerformed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_panelMouseClickedPerformed
        mainTabbedPane.requestFocusInWindow();
    }//GEN-LAST:event_panelMouseClickedPerformed

    private void menuItemSaveSnapshotActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemSaveSnapshotActionPerformed
        if (mainTabbedPane.getSelectedComponent() instanceof JPanel) {
            String fileName = JOptionPane.showInputDialog("Filename:");
            if (fileName != null && !fileName.isEmpty()) {
                try {
                    BufferedImage i = new BufferedImage(mainTabbedPane.getSelectedComponent().getWidth(), mainTabbedPane.getSelectedComponent().getHeight(), BufferedImage.TYPE_INT_ARGB);
                    mainTabbedPane.getSelectedComponent().paint(i.createGraphics());
                    ImageIO.write(i, "png", new File(fileName));
                } catch (IOException io) {
                    JOptionPane.showMessageDialog(this, io);
                }
            }
        }
    }//GEN-LAST:event_menuItemSaveSnapshotActionPerformed

    private void prepareNetworkButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_prepareNetworkButtonActionPerformed
        int d_m = (Integer) spinnerPrepareGroupCount.getValue();

        if (d_m < 4) {
            return;
        }

        int[] v = new int[1 << d_m];
        String prep = "31";
        for (int j = 0; j < d_m - 4; j++) {
            String tmp = "";
            for (int i = 0; i < prep.length(); i++) {
                switch (prep.charAt(i)) {
                    case '1':
                        if (i > 0 && (i % 2 == 1) && prep.charAt(i - 1) == '3') {
                            tmp += "21";
                        } else {
                            tmp += "11";
                        }
                        break;
                    case '2':
                        tmp += "31";
                        break;
                    case '3':
                        if (i < prep.length() - 1 && (i % 2 == 0) && prep.charAt(i + 1) == '1') {
                            tmp += "32";
                        } else {
                            tmp += "33";
                        }
                        break;
                    case 'c':
                        tmp += "c3";
                        break;
                }
            }
            prep = tmp;
        }

        if (prepareNetworkAltCheckBox.isSelected()) {
            prep = "c" + prep.substring(1, prep.length() - 1) + "0";
        }

        for (int i = 0; i < prep.length(); i++) {
            switch (prep.charAt(i)) {
                case '1':
                    v[8 * i] = 1;
                    break;
                case '2':
                    v[8 * i] = v[8 * i + 4] = 1;
                    break;
                case '3':
                    v[8 * i + 1] = v[8 * i + 2] = v[8 * i + 4] = 1;
                    break;
                case 'c':
                    v[8 * i + 3] = v[8 * i + 5] = v[8 * i + 6] = 1;
                    break;
            }
        }

        for (int i = 0; i < (1 << Application.getIdnetManager().getd()); i++) {
            Application.getIdnetManager().getIdiotypes()[i].n = v[i & ((1 << d_m) - 1)];
        }

        String s = "";
        for (int i = 0; i < Application.getIdnetManager().getd(); i++) {
            if (i < Application.getIdnetManager().getd() - d_m) {
                s += "0";
            } else {
                s += "1";
            }
        }
        textCustomBitMask.setText(s);
        textCustomBitValues.setText(Helper.getBitString(0, Application.getIdnetManager().getd()));
        menuItemDrawDetBitsActionPerformed(null);
    }//GEN-LAST:event_prepareNetworkButtonActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        class IterationTask extends SwingWorker<Void, Void> {

            private static final int STEP_SIZE = 250;
            private int n;

            public IterationTask(int n) {
                this.n = n;
            }

            @Override
            public Void doInBackground() {
                setProgress(0);
                for (int i = 0; i < n; i += STEP_SIZE) {
                    Application.getIdnetManager().iterate(Math.min(STEP_SIZE, n - i));
                    setProgress(100 * (i + 1) / n);
                    if (isCancelled()) {
                        return null;
                    }
                }
                setProgress(100);
                return null;
            }

            @Override
            public void done() {
            }
        }

        if (timer.isRunning()) {
            menuItemRun.setSelected(false);
            menuItemRunActionPerformed(evt);
        }

        String nStr = JOptionPane.showInputDialog("n = ");
        if (nStr != null && !nStr.equals("")) {
            try {
                final int n = Integer.parseInt(nStr);
                final ProgressMonitor progressMonitor = new ProgressMonitor(this,
                        "Iterating...",
                        "", 0, 100);
                progressMonitor.setProgress(0);
                final IterationTask task = new IterationTask(n);
                task.addPropertyChangeListener(new PropertyChangeListener() {

                    public void propertyChange(PropertyChangeEvent evt) {
                        if ("progress".equals(evt.getPropertyName())) {
                            int progress = (Integer) evt.getNewValue();
                            progressMonitor.setProgress(progress);
                            progressMonitor.setNote(progress + "%");
                            if (progressMonitor.isCanceled() || task.isDone()) {
                                if (progressMonitor.isCanceled()) {
                                    task.cancel(true);
                                }
                                progressMonitor.close();
                                updateIdnetStatistics();
                                setEnabled(true);
                            }
                        }
                    }
                });
                task.execute();
                setEnabled(false);
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "Not an integer!");
            }
        }
        requestFocus();
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void detBitsUpButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_detBitsUpButtonActionPerformed
        int sel = detBitsList.getSelectedIndex();
        if (sel > 0) {
            String tmp = (String) ((DefaultListModel) detBitsList.getModel()).get(sel);
            ((DefaultListModel) detBitsList.getModel()).setElementAt(((DefaultListModel) detBitsList.getModel()).get(sel - 1), sel);
            ((DefaultListModel) detBitsList.getModel()).setElementAt(tmp, sel - 1);
            detBitsList.setSelectedIndex(sel - 1);
        }
        menuItemDrawDetBitsActionPerformed(evt);
    }//GEN-LAST:event_detBitsUpButtonActionPerformed

    private void detBitsDownButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_detBitsDownButtonActionPerformed
        int sel = detBitsList.getSelectedIndex();
        if (sel < Application.getIdnetManager().getd() - 1) {
            String tmp = (String) ((DefaultListModel) detBitsList.getModel()).get(sel);
            ((DefaultListModel) detBitsList.getModel()).setElementAt(((DefaultListModel) detBitsList.getModel()).get(sel + 1), sel);
            ((DefaultListModel) detBitsList.getModel()).setElementAt(tmp, sel + 1);
            detBitsList.setSelectedIndex(sel + 1);
        }
        menuItemDrawDetBitsActionPerformed(evt);
    }//GEN-LAST:event_detBitsDownButtonActionPerformed

    private void menuItemRecalcActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemRecalcActionPerformed
        Application.getIdnetManager().recalc();
        ((COGDiagramPanel) cogDiagramPanel).recalc();
        updateIdnetStatistics();
    }//GEN-LAST:event_menuItemRecalcActionPerformed

    private void menuItemDrawMeansActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemDrawMeansActionPerformed
        if (menuItemDrawMeans.isSelected()) {
            ((NetworkTopologyPanel) networkTopologyPanel).setDrawType(NetworkTopologyPanel.DRAW_TOTAL_MEANS);
        } else {
            ((NetworkTopologyPanel) networkTopologyPanel).setDrawType(NetworkTopologyPanel.DRAW_CURRENT);
        }
        Application.getIdnetManager().setCalcMeanGroupOccs(menuItemDrawMeans.isSelected());
        updateIdnetStatistics();
    }//GEN-LAST:event_menuItemDrawMeansActionPerformed

    private void menuItemExtNeighbourStatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemExtNeighbourStatActionPerformed
        Application.getIdnetManager().setStatNeighbourOccupations(menuItemExtNeighbourStat.isSelected());
        updateIdnetStatistics();
    }//GEN-LAST:event_menuItemExtNeighbourStatActionPerformed

    private void jMenuItem7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem7ActionPerformed
        DeterminantBits detBits = Application.getIdnetManager().calcDeterminantBits();
        textCustomBitMask.setText(Helper.getBitString(detBits.mask, Application.getIdnetManager().getd()));
        textCustomBitValues.setText(Helper.getBitString(detBits.values, Application.getIdnetManager().getd()));
        ((DefaultListModel) detBitsList.getModel()).clear();
        for (int i = 0; i < Application.getIdnetManager().getd(); i++) {
            ((DefaultListModel) detBitsList.getModel()).addElement(Integer.toString(detBits.order[i]));
        }
        menuItemDrawDetBitsActionPerformed(evt);
    }//GEN-LAST:event_jMenuItem7ActionPerformed

    private void menuItemDrawDetBitsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemDrawDetBitsActionPerformed
        if (menuItemDrawDetBits.isSelected()) {
            DeterminantBits detBits = new DeterminantBits();
            detBits.mask = Integer.parseInt(textCustomBitMask.getText().trim(), 2);
            detBits.values = Integer.parseInt(textCustomBitValues.getText().trim(), 2);
            detBits.order = new int[Application.getIdnetManager().getd()];
            for (int i = 0; i < Application.getIdnetManager().getd(); i++) {
                detBits.order[i] = Integer.parseInt((String) ((DefaultListModel) detBitsList.getModel()).get(i));
            }

            ((Network2DPanel) network2DPanel).arrangeByDetBitGroups(detBits);
            ((LinkMatrixPanel) linkMatrixPanel).arrangeByDetBitGroups(detBits);
            ((NetworkTopologyPanel) networkTopologyPanel).setDeterminantBits(detBits);
        } else {
            ((Network2DPanel) network2DPanel).arrangeDefault();
            ((LinkMatrixPanel) linkMatrixPanel).arrangeDefault();
            ((NetworkTopologyPanel) networkTopologyPanel).setDeterminantBits(null);
        }
        updateIdnetStatistics();
    }//GEN-LAST:event_menuItemDrawDetBitsActionPerformed

    private void menuItemFullscreenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemFullscreenActionPerformed
        getGraphicsConfiguration().getDevice().setFullScreenWindow(menuItemFullscreen.isSelected() ? this : null);
    }//GEN-LAST:event_menuItemFullscreenActionPerformed

    private void spinnerTimerDelayKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_spinnerTimerDelayKeyPressed
    }//GEN-LAST:event_spinnerTimerDelayKeyPressed

    private void menuStat_pActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuStat_pActionPerformed
    }//GEN-LAST:event_menuStat_pActionPerformed

    private void jMenuItem8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem8ActionPerformed
        if (timer.isRunning()) {
            menuItemRun.setSelected(false);
            menuItemRunActionPerformed(evt);
        }
        String nStr = JOptionPane.showInputDialog("p = ");
        if (nStr != null && !nStr.equals("")) {
            try {
                final double p = Double.parseDouble(nStr);
                Application.getIdnetManager().setp(p);
                updateParamSpinners();
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "Not a number!");
            }
        }
        requestFocus();
    }//GEN-LAST:event_jMenuItem8ActionPerformed

    private void change_d(int d) {
        Application.getIdnetManager().setd(d);
        if (menuItemDrawDetBits.isSelected()) {
            menuItemDrawDetBits.setSelected(false);
            menuItemDrawDetBitsActionPerformed(null);
        }
        if (menuItemExtNeighbourStat.isSelected()) {
            menuItemExtNeighbourStat.setSelected(false);
            menuItemExtNeighbourStatActionPerformed(null);
        }

        ((LinkMatrixPanel) linkMatrixPanel).change_d(d);
        ((Network2DPanel) network2DPanel).change_d(d);
        ((COGDiagramPanel) cogDiagramPanel).change_d(d);
        ((DefaultListModel) detBitsList.getModel()).clear();
        for (int i = 0; i < Application.getIdnetManager().getd(); i++) {
            ((DefaultListModel) detBitsList.getModel()).addElement(i + "");
        }

        textCustomBitMask.setText(Helper.getBitString(0, Application.getIdnetManager().getd()));
        textCustomBitValues.setText(Helper.getBitString(0, Application.getIdnetManager().getd()));
        updateParamSpinners();
    }

    private void jMenuItem9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem9ActionPerformed
        if (timer.isRunning()) {
            menuItemRun.setSelected(false);
            menuItemRunActionPerformed(evt);
        }
        String nStr = JOptionPane.showInputDialog("d = ");
        if (nStr != null && !nStr.equals("")) {
            try {
                final int d = Integer.parseInt(nStr);
                change_d(d);
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "Not an integer!");
            }
        }
        requestFocus();

    }//GEN-LAST:event_jMenuItem9ActionPerformed

    private void jMenuItem10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem10ActionPerformed
        String nStr = JOptionPane.showInputDialog("size = ");
        if (nStr != null && !nStr.equals("")) {
            try {
                final int size = Integer.parseInt(nStr);
                ((Network2DPanel) network2DPanel).setSquareSize(size);
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "Not an integer!");
            }
        }
        requestFocus();
    }//GEN-LAST:event_jMenuItem10ActionPerformed

    private void jMenuItem11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem11ActionPerformed
        if (mainTabbedPane.getSelectedComponent() instanceof NetworkTopologyPanel) {
            String fileName = JOptionPane.showInputDialog("Filename:");
            if (fileName != null && !fileName.isEmpty()) {
                try {
                    ((NetworkTopologyPanel) mainTabbedPane.getSelectedComponent()).saveDataToFile(fileName);
                } catch (IOException io) {
                    io.printStackTrace();
                }
            }
        }
    }//GEN-LAST:event_jMenuItem11ActionPerformed

    private void prepareNetworkFillGroupButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_prepareNetworkFillGroupButtonActionPerformed
        int d_m = (Integer) spinnerPrepareGroupCount.getValue();
        int k = (Integer) spinnerPrepareFillGroup.getValue();
        int mask = (1 << d_m) - 1;
        Application.getIdnetManager().reset();
        Idiotype[] idiotypes = Application.getIdnetManager().getIdiotypes();
        for (int i = 0; i < (1 << Application.getIdnetManager().getd()); i++) {
            if (Helper.hammingWeight(i & mask) == k) {
                idiotypes[i].n = 1;
            }
        }
        textCustomBitMask.setText(Helper.getBitString(mask, Application.getIdnetManager().getd()));
        textCustomBitValues.setText(Helper.getBitString(0, Application.getIdnetManager().getd()));
    }//GEN-LAST:event_prepareNetworkFillGroupButtonActionPerformed

    private void detBitsPanelComponentHidden(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_detBitsPanelComponentHidden
        menuItemDrawDetBitsActionPerformed(null);
    }//GEN-LAST:event_detBitsPanelComponentHidden

    private void detBitsResetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_detBitsResetButtonActionPerformed
        for (int i = 0; i < Application.getIdnetManager().getd(); i++) {
            ((DefaultListModel) detBitsList.getModel()).setElementAt(i, i);
        }
        detBitsList.setSelectedIndex(-1);
        menuItemDrawDetBitsActionPerformed(evt);
    }//GEN-LAST:event_detBitsResetButtonActionPerformed

    private void buttonAntigenInsertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonAntigenInsertActionPerformed
        if (textAreaAntigen.getText().length() == 0) {
            int a = 0;
            if (menuItemDrawDetBits.isSelected()) {
                DeterminantBits detBits = Application.getIdnetManager().calcDeterminantBits();
                int m = 1;
                for (int i = 0; i < (1 << Application.getIdnetManager().getd()); i++) {
                    if (Helper.hammingWeight(i & detBits.mask) == (Integer) spinnerAntigenGroup.getValue()) {
                        m = i;
                        break;
                    }
                }
                a = detBits.values ^ m;
            }
            ((AntigenDiagramPanel) antigenDiagramPanel).addAntigen(new Antigen(Application.getIdnetManager(), new int[]{a}));
        } else {
            if (!textAreaAntigen.getText().endsWith("\n")) {
                textAreaAntigen.setText(textAreaAntigen.getText() + "\n");
            }
            String str[] = textAreaAntigen.getText().split("\n");
            int[] a = new int[str.length];
            for (int i = 0; i < str.length; i++) {
                try {
                    a[i] = Integer.parseInt(str[i], 2);
                } catch (NumberFormatException e) {
                    return;
                }
            }
            ((AntigenDiagramPanel) antigenDiagramPanel).addAntigen(new Antigen(Application.getIdnetManager(), a));
        }
    }//GEN-LAST:event_buttonAntigenInsertActionPerformed

    private void buttonAntigenRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonAntigenRemoveActionPerformed
        ((AntigenDiagramPanel) antigenDiagramPanel).removeAntigen();
    }//GEN-LAST:event_buttonAntigenRemoveActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        ArrayList<Integer> s = new ArrayList<Integer>();
        if (!blocksArea.getText().endsWith("\n")) {
            blocksArea.setText(blocksArea.getText() + "\n");
        }
        String str[] = blocksArea.getText().split("\n");
        for (int i = 0; i < str.length; i++) {
            s.add(Integer.parseInt(str[i], 2));
        }
        ((NetworkBlockPanel) networkBlockPanel).setSubgroupCreators(s);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        textAreaAntigen.setText(Application.getClipboardContents());
        buttonAntigenInsertActionPerformed(evt);
    }//GEN-LAST:event_jButton3ActionPerformed

    private void menuItemViewShowNeighbourMeansActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemViewShowNeighbourMeansActionPerformed
        ((Network2DPanel) network2DPanel).setShowNeighbourMeans(menuItemViewShowNeighbourMeans.isSelected());
    }//GEN-LAST:event_menuItemViewShowNeighbourMeansActionPerformed

    private void configurationsPanelComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_configurationsPanelComponentShown
        File dir = new File("jIdNet");
        File[] files = dir.listFiles(new FilenameFilter() {

            public boolean accept(File dir, String name) {
                return name.endsWith(".conf");
            }
        });
        ((DefaultListModel) configurationFilesList.getModel()).clear();
        for (int i = 0; i < files.length; i++) {
            ((DefaultListModel) configurationFilesList.getModel()).addElement(files[i].getName().substring(0, files[i].getName().length() - 5));
        }
        files = dir.listFiles(new FilenameFilter() {

            public boolean accept(File dir, String name) {
                return name.endsWith(".net");
            }
        });
        ((DefaultListModel) networkFilesList.getModel()).clear();
        for (int i = 0; i < files.length; i++) {
            ((DefaultListModel) networkFilesList.getModel()).addElement(files[i].getName().substring(0, files[i].getName().length() - 4));
        }
    }//GEN-LAST:event_configurationsPanelComponentShown

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        if (configurationFilesList.getSelectedIndex() >= 0) {
            String fileName = "jIdNet/" + (String) ((DefaultListModel) configurationFilesList.getModel()).get(configurationFilesList.getSelectedIndex()) + ".conf";
            try {
                Application.getIdnetManager().loadStartConfiguration(fileName);
                updateParamSpinners();
            } catch (IOException e) {
                configurationCommentLabel.setText("Error loading file");
            }
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void mainTabbedPaneComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_mainTabbedPaneComponentShown
    }//GEN-LAST:event_mainTabbedPaneComponentShown

    private void configurationFilesListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_configurationFilesListValueChanged
        if (configurationFilesList.getSelectedIndex() < 0) {
            configurationCommentLabel.setText("");
            return;
        }
        String fileName = "jIdNet/" + (String) ((DefaultListModel) configurationFilesList.getModel()).get(configurationFilesList.getSelectedIndex()) + ".conf";
        try {
            Properties prop = new Properties();
            prop.loadFromXML(new FileInputStream(fileName));
            configurationCommentLabel.setText(prop.getProperty("comment"));
        } catch (IOException e) {
            configurationCommentLabel.setText("Error loading file");
        }
    }//GEN-LAST:event_configurationFilesListValueChanged

    private void networkFilesListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_networkFilesListValueChanged
        if (networkFilesList.getSelectedIndex() < 0) {
            configurationCommentLabel.setText("");
            return;
        }
        String fileName = "jIdNet/" + (String) ((DefaultListModel) networkFilesList.getModel()).get(networkFilesList.getSelectedIndex()) + ".net";
        try {
            Properties prop = new Properties();
            prop.loadFromXML(new FileInputStream(fileName));
            networkCommentLabel.setText(prop.getProperty("comment"));
        } catch (IOException e) {
            networkCommentLabel.setText("Error loading file");
        }
    }//GEN-LAST:event_networkFilesListValueChanged

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        if (networkFilesList.getSelectedIndex() >= 0) {
            String fileName = "jIdNet/" + (String) ((DefaultListModel) networkFilesList.getModel()).get(networkFilesList.getSelectedIndex()) + ".net";
            try {
                Application.getIdnetManager().loadNetwork(fileName);
                updateParamSpinners();
            } catch (IOException e) {
                networkCommentLabel.setText("Error loading file");
            }
        }
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        String fileName = JOptionPane.showInputDialog("Name");
        if (fileName != null && !fileName.equals("")) {
            fileName = "jIdNet/" + fileName + ".conf";
            String comment = JOptionPane.showInputDialog("Comment");
            if (comment != null && !comment.equals("")) {
                try {
                    Application.getIdnetManager().saveStartConfiguration(fileName, comment);
                    JOptionPane.showMessageDialog(this, "Saved");
                    configurationsPanelComponentShown(null);
                } catch(IOException e) {
                    JOptionPane.showMessageDialog(this, "Failed");
                }
            }
        }
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        String fileName = JOptionPane.showInputDialog("Name");
        if (fileName != null && !fileName.equals("")) {
            fileName = "jIdNet/" + fileName + ".net";
            String comment = JOptionPane.showInputDialog("Comment");
            if (comment != null && !comment.equals("")) {
                try {
                    Application.getIdnetManager().saveNetwork(fileName, comment);
                    JOptionPane.showMessageDialog(this, "Saved");
                    configurationsPanelComponentShown(null);
                } catch(IOException e) {
                    JOptionPane.showMessageDialog(this, "Failed");
                }
            }
        }
    }//GEN-LAST:event_jButton7ActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel antigenDiagramPanel;
    private javax.swing.JPanel antigenPanel;
    private javax.swing.JTextArea blocksArea;
    private javax.swing.JPanel blocksPanel;
    private javax.swing.JPanel blocksViewPanel;
    private javax.swing.JButton buttonAntigenInsert;
    private javax.swing.JButton buttonAntigenRemove;
    private javax.swing.JButton calcClustersButton;
    private javax.swing.JButton calcGroupOccButton;
    private javax.swing.JPanel clusterPanel;
    private javax.swing.JTextArea clustersText;
    private javax.swing.JPanel cogDiagramPanel;
    private javax.swing.JTextArea configurationCommentLabel;
    private javax.swing.JList configurationFilesList;
    private javax.swing.JPanel configurationsPanel;
    private javax.swing.JButton detBitsDownButton;
    private javax.swing.JList detBitsList;
    private javax.swing.JPanel detBitsPanel;
    private javax.swing.JButton detBitsResetButton;
    private javax.swing.JButton detBitsUpButton;
    private javax.swing.ButtonGroup drawTypeButtonGroup;
    private javax.swing.JTextArea groupOccText;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem10;
    private javax.swing.JMenuItem jMenuItem11;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem7;
    private javax.swing.JMenuItem jMenuItem8;
    private javax.swing.JMenuItem jMenuItem9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JPanel linkMatrixPanel;
    private javax.swing.JPanel linkWeightingPanel;
    private javax.swing.JTabbedPane mainTabbedPane;
    private javax.swing.JCheckBoxMenuItem menuItemDrawDetBits;
    private javax.swing.JCheckBoxMenuItem menuItemDrawMeans;
    private javax.swing.JCheckBoxMenuItem menuItemExtNeighbourStat;
    private javax.swing.JCheckBoxMenuItem menuItemFullscreen;
    private javax.swing.JMenuItem menuItemRecalc;
    private javax.swing.JMenuItem menuItemReseed;
    private javax.swing.JMenuItem menuItemReseedAndReset;
    private javax.swing.JMenuItem menuItemReset;
    private javax.swing.JCheckBoxMenuItem menuItemRun;
    private javax.swing.JMenuItem menuItemSaveSnapshot;
    private javax.swing.JMenuItem menuItemStep;
    private javax.swing.JCheckBoxMenuItem menuItemViewShowNeighbourMeans;
    private javax.swing.JMenu menuStatEntropy;
    private javax.swing.JMenu menuStatTotalOcc;
    private javax.swing.JMenu menuStat_d;
    private javax.swing.JMenu menuStat_p;
    private javax.swing.JMenu menuStat_t;
    private javax.swing.JPanel network1DPanel;
    private javax.swing.JPanel network2DPanel;
    private javax.swing.JPanel networkBlockPanel;
    private javax.swing.JTextArea networkCommentLabel;
    private javax.swing.JList networkFilesList;
    private javax.swing.JPanel networkTopologyPanel;
    private javax.swing.JPanel paramaterDetailsPanel;
    private javax.swing.JPanel parameterPanel;
    private javax.swing.JTabbedPane parameterTabPane;
    private javax.swing.JCheckBox prepareNetworkAltCheckBox;
    private javax.swing.JButton prepareNetworkButton;
    private javax.swing.JButton prepareNetworkFillGroupButton;
    private javax.swing.JButton setp_deadlyButton;
    private javax.swing.JSpinner spinnerAntigenGroup;
    private javax.swing.JSpinner spinnerLinkW0;
    private javax.swing.JSpinner spinnerLinkW1;
    private javax.swing.JSpinner spinnerLinkW10;
    private javax.swing.JSpinner spinnerLinkW11;
    private javax.swing.JSpinner spinnerLinkW2;
    private javax.swing.JSpinner spinnerLinkW3;
    private javax.swing.JSpinner spinnerLinkW4;
    private javax.swing.JSpinner spinnerLinkW5;
    private javax.swing.JSpinner spinnerLinkW6;
    private javax.swing.JSpinner spinnerLinkW7;
    private javax.swing.JSpinner spinnerLinkW8;
    private javax.swing.JSpinner spinnerLinkW9;
    private javax.swing.JSpinner spinnerMax_s;
    private javax.swing.JSpinner spinnerN;
    private javax.swing.JSpinner spinnerPrepareFillGroup;
    private javax.swing.JSpinner spinnerPrepareGroupCount;
    private javax.swing.JSpinner spinnerRedrawDelay;
    private javax.swing.JSpinner spinnerSeed;
    private javax.swing.JSpinner spinnerTimerDelay;
    private javax.swing.JSpinner spinnerp;
    private javax.swing.JSpinner spinnerp_deadly;
    private javax.swing.JSpinner spinnert_l;
    private javax.swing.JSpinner spinnert_u;
    private javax.swing.JLabel tLabel;
    private javax.swing.JTextArea textAreaAntigen;
    private javax.swing.JTextField textCustomBitMask;
    private javax.swing.JTextField textCustomBitValues;
    private javax.swing.ButtonGroup topologyDrawTypeButtonGroup;
    // End of variables declaration//GEN-END:variables
}
