package jidnet.gui;

import java.awt.Color;
import java.awt.Window;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.image.BufferedImage;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.File;
import java.io.IOException;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.Hashtable;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Properties;
import java.util.Vector;
import javax.imageio.ImageIO;
import javax.swing.DefaultListModel;
import javax.swing.JComponent;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JSpinner;
import javax.swing.JTextField;
import javax.swing.KeyStroke;
import javax.swing.ProgressMonitor;
import javax.swing.SwingWorker;
import javax.swing.Timer;
import javax.swing.text.MaskFormatter;
import jidnet.idnet.Helper;
import jidnet.idnet.Idiotype;
import jidnet.idnet.DeterminantBits;

/**
 *
 * @author Sven Willner
 */
public class MainWindow extends javax.swing.JFrame {

    private Timer timer;
    private int redrawDelay;

    /** Creates new form MainWindow */
    public MainWindow() {
        initComponents();

        statisticsPanel.setVisible(false);
        updateParamSpinners();

        spinnerMax_s.setValue(Application.getIdnetManager().getmax_s());
        redrawDelay = Integer.parseInt(Application.getConfiguration().getProperty("redraw_delay", "10"));
        spinnerRedrawDelay.setValue(redrawDelay);
        spinnerTimerDelay.setValue(Integer.parseInt(Application.getConfiguration().getProperty("timer_delay", "10")));

        /*JSpinner[] spinners = { spinnerTimerDelay };
        for (JSpinner spinner : spinners) {
        for (char c = 'a'; c <= 'z'; c++) {
        spinner.getEditor().getInputMap().put(KeyStroke.getKeyStroke(c), "none");
        spinner.getInputMap().put(KeyStroke.getKeyStroke(c), "none");
        }
        for (char c = 'A'; c <= 'Z'; c++)
        spinner.getInputMap().put(KeyStroke.getKeyStroke(c), "none");
        }*/

        for (Properties p : Application.getConfigurations())
            ((DefaultListModel) configurationsList.getModel()).addElement(p.getProperty("name"));

        for (int i = 0; i < 12; i++)
            ((DefaultListModel) detBitsList.getModel()).addElement(i + "");

        this.setExtendedState(this.getExtendedState() | MAXIMIZED_BOTH);

        timer = new Timer(Integer.parseInt(Application.getConfiguration().getProperty("timer_delay", "10")), new ActionListener() {

            public void actionPerformed(ActionEvent e) {
                for (int i = 0; i < redrawDelay; i++)
                    Application.getIdnetManager().iterate();
                updateIdnetStatistics();
            }
        });

    }

    ;

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        drawTypeButtonGroup = new javax.swing.ButtonGroup();
        topologyDrawTypeButtonGroup = new javax.swing.ButtonGroup();
        jPanel4 = new javax.swing.JPanel();
        mainTabbedPane = new javax.swing.JTabbedPane();
        cogDiagramPanel = new COGDiagramPanel(Application.getIdnetManager());
        network2DPanel = new Network2DPanel(Application.getIdnetManager());
        network1DPanel = new jidnet.gui.Network1DPanel(Application.getIdnetManager());
        networkTopologyPanel = new NetworkTopologyPanel(Application.getIdnetManager());
        clusterPanel = new javax.swing.JPanel();
        calcClustersButton = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        groupOccText = new javax.swing.JTextArea();
        calcGroupOccButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        clustersText = new javax.swing.JTextArea();
        linkWeightingPanel = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        spinnerLinkW0 = new javax.swing.JSpinner();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel12 = new javax.swing.JLabel();
        spinnerLinkW1 = new javax.swing.JSpinner();
        spinnerLinkW2 = new javax.swing.JSpinner();
        jLabel13 = new javax.swing.JLabel();
        spinnerLinkW3 = new javax.swing.JSpinner();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        spinnerLinkW4 = new javax.swing.JSpinner();
        jLabel16 = new javax.swing.JLabel();
        spinnerLinkW5 = new javax.swing.JSpinner();
        spinnerLinkW6 = new javax.swing.JSpinner();
        jLabel17 = new javax.swing.JLabel();
        spinnerLinkW7 = new javax.swing.JSpinner();
        jLabel18 = new javax.swing.JLabel();
        spinnerLinkW8 = new javax.swing.JSpinner();
        jLabel19 = new javax.swing.JLabel();
        spinnerLinkW9 = new javax.swing.JSpinner();
        jLabel20 = new javax.swing.JLabel();
        spinnerLinkW11 = new javax.swing.JSpinner();
        spinnerLinkW10 = new javax.swing.JSpinner();
        jLabel21 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        spinnerp_deadly = new javax.swing.JSpinner();
        setp_deadlyButton = new javax.swing.JButton();
        detBitsPanel = new javax.swing.JPanel();
        jLabel24 = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        jLabel30 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        detBitsList = new javax.swing.JList();
        detBitsUpButton = new javax.swing.JButton();
        detBitsDownButton = new javax.swing.JButton();
        try {
            MaskFormatter textCustomBitMaskFormatter = new MaskFormatter("************");
            textCustomBitMaskFormatter.setValidCharacters("01");
            textCustomBitMask = new javax.swing.JFormattedTextField(textCustomBitMaskFormatter);
        } catch(ParseException e) {
        }
        try {
            MaskFormatter textCustomBitValuesFormatter = new MaskFormatter("************");
            textCustomBitValuesFormatter.setValidCharacters("01");
            textCustomBitValues = new javax.swing.JFormattedTextField(textCustomBitValuesFormatter);
        } catch(ParseException e) {
        }
        configurationsPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        configurationsList = new javax.swing.JList();
        newConfigButton = new javax.swing.JButton();
        loadConfigButton = new javax.swing.JButton();
        removeConfigButton = new javax.swing.JButton();
        overwriteConfigButton = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel28 = new javax.swing.JLabel();
        spinnerPrepareGroupCount = new javax.swing.JSpinner();
        jLabel29 = new javax.swing.JLabel();
        spinnerPrepareFillGroup = new javax.swing.JSpinner();
        prepareNetworkButton = new javax.swing.JButton();
        statisticsPanel = new javax.swing.JPanel();
        spinnerRedrawDelay = new javax.swing.JSpinner();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        tLabel = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        spinnerp = new javax.swing.JSpinner();
        jLabel4 = new javax.swing.JLabel();
        spinnert_l = new javax.swing.JSpinner();
        jLabel5 = new javax.swing.JLabel();
        spinnert_u = new javax.swing.JSpinner();
        spinnerMax_s = new javax.swing.JSpinner();
        jLabel6 = new javax.swing.JLabel();
        totalOccLabel = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        spinnerN = new javax.swing.JSpinner();
        jLabel7 = new javax.swing.JLabel();
        spinnerTimerDelay = new javax.swing.JSpinner();
        jLabel27 = new javax.swing.JLabel();
        spinnerSeed = new javax.swing.JSpinner();
        jLabel26 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        menuItemRun = new javax.swing.JCheckBoxMenuItem();
        menuItemStep = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        menuItemReseed = new javax.swing.JMenuItem();
        menuItemReset = new javax.swing.JMenuItem();
        menuItemRecalc = new javax.swing.JMenuItem();
        menuItemReseedAndReset = new javax.swing.JMenuItem();
        jMenuItem7 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenuItem6 = new javax.swing.JMenuItem();
        menuItemExtNeighbourStat = new javax.swing.JCheckBoxMenuItem();
        jMenu3 = new javax.swing.JMenu();
        jCheckBoxMenuItem1 = new javax.swing.JCheckBoxMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        menuItemSaveSnapshot = new javax.swing.JMenuItem();
        menuItemDrawMeans = new javax.swing.JCheckBoxMenuItem();
        menuItemDrawDetBits = new javax.swing.JCheckBoxMenuItem();
        menuItemFullscreen = new javax.swing.JCheckBoxMenuItem();
        jMenu4 = new javax.swing.JMenu();
        menuStat_p = new javax.swing.JMenu();
        jMenuItem8 = new javax.swing.JMenuItem();
        menuStat_t = new javax.swing.JMenu();
        menuStatTotalOcc = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Idiotypic Network");
        setName("jIdNetFrame"); // NOI18N
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                formKeyTyped(evt);
            }
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
        });
        getContentPane().setLayout(new javax.swing.BoxLayout(getContentPane(), javax.swing.BoxLayout.Y_AXIS));

        mainTabbedPane.setTabLayoutPolicy(javax.swing.JTabbedPane.SCROLL_TAB_LAYOUT);

        cogDiagramPanel.setBackground(new java.awt.Color(255, 255, 255));
        cogDiagramPanel.setNextFocusableComponent(mainTabbedPane);
        cogDiagramPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                panelMouseClickedPerformed(evt);
            }
        });

        javax.swing.GroupLayout cogDiagramPanelLayout = new javax.swing.GroupLayout(cogDiagramPanel);
        cogDiagramPanel.setLayout(cogDiagramPanelLayout);
        cogDiagramPanelLayout.setHorizontalGroup(
            cogDiagramPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 563, Short.MAX_VALUE)
        );
        cogDiagramPanelLayout.setVerticalGroup(
            cogDiagramPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 586, Short.MAX_VALUE)
        );

        mainTabbedPane.addTab("Center of gravity", cogDiagramPanel);

        network2DPanel.setBackground(new java.awt.Color(255, 255, 255));
        network2DPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                panelMouseClickedPerformed(evt);
            }
        });

        javax.swing.GroupLayout network2DPanelLayout = new javax.swing.GroupLayout(network2DPanel);
        network2DPanel.setLayout(network2DPanelLayout);
        network2DPanelLayout.setHorizontalGroup(
            network2DPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 563, Short.MAX_VALUE)
        );
        network2DPanelLayout.setVerticalGroup(
            network2DPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 586, Short.MAX_VALUE)
        );

        mainTabbedPane.addTab("2D View", network2DPanel);

        network1DPanel.setBackground(new java.awt.Color(255, 255, 255));
        network1DPanel.setName("network1DPanel"); // NOI18N
        network1DPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                panelMouseClickedPerformed(evt);
            }
        });

        javax.swing.GroupLayout network1DPanelLayout = new javax.swing.GroupLayout(network1DPanel);
        network1DPanel.setLayout(network1DPanelLayout);
        network1DPanelLayout.setHorizontalGroup(
            network1DPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 563, Short.MAX_VALUE)
        );
        network1DPanelLayout.setVerticalGroup(
            network1DPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 586, Short.MAX_VALUE)
        );

        mainTabbedPane.addTab("1D View", network1DPanel);

        networkTopologyPanel.setBackground(new java.awt.Color(255, 255, 255));
        networkTopologyPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                panelMouseClickedPerformed(evt);
            }
        });

        javax.swing.GroupLayout networkTopologyPanelLayout = new javax.swing.GroupLayout(networkTopologyPanel);
        networkTopologyPanel.setLayout(networkTopologyPanelLayout);
        networkTopologyPanelLayout.setHorizontalGroup(
            networkTopologyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 563, Short.MAX_VALUE)
        );
        networkTopologyPanelLayout.setVerticalGroup(
            networkTopologyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 586, Short.MAX_VALUE)
        );

        mainTabbedPane.addTab("Topology", networkTopologyPanel);

        calcClustersButton.setMnemonic('u');
        calcClustersButton.setText("Calc clusters");
        calcClustersButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                calcClustersButtonActionPerformed(evt);
            }
        });

        groupOccText.setEditable(false);
        jScrollPane3.setViewportView(groupOccText);

        calcGroupOccButton.setMnemonic('g');
        calcGroupOccButton.setText("Calculate group occupations");
        calcGroupOccButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                calcGroupOccButtonActionPerformed(evt);
            }
        });

        clustersText.setEditable(false);
        jScrollPane2.setViewportView(clustersText);

        javax.swing.GroupLayout clusterPanelLayout = new javax.swing.GroupLayout(clusterPanel);
        clusterPanel.setLayout(clusterPanelLayout);
        clusterPanelLayout.setHorizontalGroup(
            clusterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, clusterPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(clusterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(calcClustersButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 93, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(clusterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 193, Short.MAX_VALUE)
                    .addComponent(calcGroupOccButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(800, 800, 800))
        );
        clusterPanelLayout.setVerticalGroup(
            clusterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(clusterPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(clusterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(clusterPanelLayout.createSequentialGroup()
                        .addComponent(calcGroupOccButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane3))
                    .addGroup(clusterPanelLayout.createSequentialGroup()
                        .addComponent(calcClustersButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 251, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(282, Short.MAX_VALUE))
        );

        mainTabbedPane.addTab("Clusters / Groups", clusterPanel);

        jLabel9.setText("Missmatches");

        jLabel10.setText("Link weighting");

        jLabel11.setText("0");

        spinnerLinkW0.setModel(new javax.swing.SpinnerNumberModel(Double.valueOf(0.0d), Double.valueOf(0.0d), null, Double.valueOf(0.1d)));
        spinnerLinkW0.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spinnerLinkWeightingChanged(evt);
            }
        });

        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);

        jLabel12.setText("1");

        spinnerLinkW1.setModel(new javax.swing.SpinnerNumberModel(Double.valueOf(0.0d), Double.valueOf(0.0d), null, Double.valueOf(0.1d)));
        spinnerLinkW1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spinnerLinkWeightingChanged(evt);
            }
        });

        spinnerLinkW2.setModel(new javax.swing.SpinnerNumberModel(Double.valueOf(0.0d), Double.valueOf(0.0d), null, Double.valueOf(0.1d)));
        spinnerLinkW2.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spinnerLinkWeightingChanged(evt);
            }
        });

        jLabel13.setText("2");

        spinnerLinkW3.setModel(new javax.swing.SpinnerNumberModel(Double.valueOf(0.0d), Double.valueOf(0.0d), null, Double.valueOf(0.1d)));
        spinnerLinkW3.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spinnerLinkWeightingChanged(evt);
            }
        });

        jLabel14.setText("3");

        jLabel15.setText("4");

        spinnerLinkW4.setModel(new javax.swing.SpinnerNumberModel(Double.valueOf(0.0d), Double.valueOf(0.0d), null, Double.valueOf(0.1d)));
        spinnerLinkW4.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spinnerLinkWeightingChanged(evt);
            }
        });

        jLabel16.setText("5");

        spinnerLinkW5.setModel(new javax.swing.SpinnerNumberModel(Double.valueOf(0.0d), Double.valueOf(0.0d), null, Double.valueOf(0.1d)));
        spinnerLinkW5.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spinnerLinkWeightingChanged(evt);
            }
        });

        spinnerLinkW6.setModel(new javax.swing.SpinnerNumberModel(Double.valueOf(0.0d), Double.valueOf(0.0d), null, Double.valueOf(0.1d)));
        spinnerLinkW6.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spinnerLinkWeightingChanged(evt);
            }
        });

        jLabel17.setText("6");

        spinnerLinkW7.setModel(new javax.swing.SpinnerNumberModel(Double.valueOf(0.0d), Double.valueOf(0.0d), null, Double.valueOf(0.1d)));
        spinnerLinkW7.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spinnerLinkWeightingChanged(evt);
            }
        });

        jLabel18.setText("7");

        spinnerLinkW8.setModel(new javax.swing.SpinnerNumberModel(Double.valueOf(0.0d), Double.valueOf(0.0d), null, Double.valueOf(0.1d)));
        spinnerLinkW8.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spinnerLinkWeightingChanged(evt);
            }
        });

        jLabel19.setText("8");

        spinnerLinkW9.setModel(new javax.swing.SpinnerNumberModel(Double.valueOf(0.0d), Double.valueOf(0.0d), null, Double.valueOf(0.1d)));
        spinnerLinkW9.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spinnerLinkWeightingChanged(evt);
            }
        });

        jLabel20.setText("9");

        spinnerLinkW11.setModel(new javax.swing.SpinnerNumberModel(Double.valueOf(0.0d), Double.valueOf(0.0d), null, Double.valueOf(0.1d)));
        spinnerLinkW11.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spinnerLinkWeightingChanged(evt);
            }
        });

        spinnerLinkW10.setModel(new javax.swing.SpinnerNumberModel(Double.valueOf(0.0d), Double.valueOf(0.0d), null, Double.valueOf(0.1d)));
        spinnerLinkW10.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spinnerLinkWeightingChanged(evt);
            }
        });

        jLabel21.setText("10");

        jLabel22.setText("11");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel9)
                .addGap(42, 42, 42)
                .addComponent(jLabel10)
                .addGap(32, 32, 32))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(76, 76, 76)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel22, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel12, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel13, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel14, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel15, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel16, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel17, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel18, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel19, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel21, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel20, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel11, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(spinnerLinkW11, javax.swing.GroupLayout.DEFAULT_SIZE, 131, Short.MAX_VALUE)
                    .addComponent(spinnerLinkW0, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 131, Short.MAX_VALUE)
                    .addComponent(spinnerLinkW1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 131, Short.MAX_VALUE)
                    .addComponent(spinnerLinkW2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 131, Short.MAX_VALUE)
                    .addComponent(spinnerLinkW3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 131, Short.MAX_VALUE)
                    .addComponent(spinnerLinkW4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 131, Short.MAX_VALUE)
                    .addComponent(spinnerLinkW5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 131, Short.MAX_VALUE)
                    .addComponent(spinnerLinkW6, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 131, Short.MAX_VALUE)
                    .addComponent(spinnerLinkW7, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 131, Short.MAX_VALUE)
                    .addComponent(spinnerLinkW8, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 131, Short.MAX_VALUE)
                    .addComponent(spinnerLinkW10, javax.swing.GroupLayout.DEFAULT_SIZE, 131, Short.MAX_VALUE)
                    .addComponent(spinnerLinkW9, javax.swing.GroupLayout.DEFAULT_SIZE, 131, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel9)
                    .addComponent(jLabel10))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(spinnerLinkW0, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel11))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(spinnerLinkW1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel12))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(spinnerLinkW2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel13))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(spinnerLinkW3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel14))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(spinnerLinkW4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel15))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(spinnerLinkW5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel16))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(spinnerLinkW6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel17))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(spinnerLinkW7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel18))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(spinnerLinkW8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel19))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(spinnerLinkW9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel20))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(spinnerLinkW10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel21))
                        .addGap(12, 12, 12)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(spinnerLinkW11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel22))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel23.setText("Propability of mismatch being deadly:");

        spinnerp_deadly.setModel(new javax.swing.SpinnerNumberModel(0.3d, 0.0d, 1.0d, 0.1d));

        setp_deadlyButton.setText("Calculate");
        setp_deadlyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setp_deadlyButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout linkWeightingPanelLayout = new javax.swing.GroupLayout(linkWeightingPanel);
        linkWeightingPanel.setLayout(linkWeightingPanelLayout);
        linkWeightingPanelLayout.setHorizontalGroup(
            linkWeightingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(linkWeightingPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(linkWeightingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(linkWeightingPanelLayout.createSequentialGroup()
                        .addComponent(jLabel23)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(spinnerp_deadly, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6)
                        .addComponent(setp_deadlyButton, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(143, Short.MAX_VALUE))
        );
        linkWeightingPanelLayout.setVerticalGroup(
            linkWeightingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(linkWeightingPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(linkWeightingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel23)
                    .addComponent(spinnerp_deadly, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(setp_deadlyButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        mainTabbedPane.addTab("Link weighting", linkWeightingPanel);

        jLabel24.setText("mask = ");

        jLabel25.setText("values =");

        jLabel30.setText("order =");

        detBitsList.setFont(new java.awt.Font("Courier New", 1, 18));
        detBitsList.setModel(new DefaultListModel());
        detBitsList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane4.setViewportView(detBitsList);

        detBitsUpButton.setMnemonic('u');
        detBitsUpButton.setText("Up");
        detBitsUpButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                detBitsUpButtonActionPerformed(evt);
            }
        });

        detBitsDownButton.setMnemonic('o');
        detBitsDownButton.setText("Down");
        detBitsDownButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                detBitsDownButtonActionPerformed(evt);
            }
        });

        textCustomBitMask.setText("000000000000");
        textCustomBitMask.setFont(new java.awt.Font("Courier New", 1, 18));
        textCustomBitMask.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                textCustomBitMaskPropertyChange(evt);
            }
        });

        textCustomBitValues.setText("000000000000");
        textCustomBitValues.setFont(new java.awt.Font("Courier New", 1, 18));
        textCustomBitValues.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                textCustomBitValuesPropertyChange(evt);
            }
        });

        javax.swing.GroupLayout detBitsPanelLayout = new javax.swing.GroupLayout(detBitsPanel);
        detBitsPanel.setLayout(detBitsPanelLayout);
        detBitsPanelLayout.setHorizontalGroup(
            detBitsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(detBitsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(detBitsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel24)
                    .addComponent(jLabel25))
                .addGap(18, 18, 18)
                .addGroup(detBitsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(textCustomBitValues, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(textCustomBitMask, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jLabel30)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(detBitsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(detBitsDownButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(detBitsUpButton, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE))
                .addContainerGap(102, Short.MAX_VALUE))
        );
        detBitsPanelLayout.setVerticalGroup(
            detBitsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(detBitsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(detBitsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(detBitsPanelLayout.createSequentialGroup()
                        .addComponent(detBitsUpButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(detBitsDownButton))
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 393, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(detBitsPanelLayout.createSequentialGroup()
                        .addGroup(detBitsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel24)
                            .addComponent(textCustomBitMask, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel30))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(detBitsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(textCustomBitValues, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel25))))
                .addContainerGap(181, Short.MAX_VALUE))
        );

        mainTabbedPane.addTab("Determinant bits", detBitsPanel);

        configurationsList.setModel(new DefaultListModel());
        configurationsList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(configurationsList);

        newConfigButton.setText("New configuration");
        newConfigButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newConfigButtonActionPerformed(evt);
            }
        });

        loadConfigButton.setText("Load selected");
        loadConfigButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadConfigButtonActionPerformed(evt);
            }
        });

        removeConfigButton.setText("Remove selected");
        removeConfigButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeConfigButtonActionPerformed(evt);
            }
        });

        overwriteConfigButton.setText("Overwrite selected");
        overwriteConfigButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                overwriteConfigButtonActionPerformed(evt);
            }
        });

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Prepare network"));

        jLabel28.setText("d_m =");

        spinnerPrepareGroupCount.setModel(new javax.swing.SpinnerNumberModel(2, 1, 12, 1));

        jLabel29.setText("Fill group S_");

        spinnerPrepareFillGroup.setModel(new javax.swing.SpinnerNumberModel(0, 0, 12, 1));

        prepareNetworkButton.setText("Prepare network");
        prepareNetworkButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                prepareNetworkButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel28)
                        .addGap(46, 46, 46)
                        .addComponent(spinnerPrepareGroupCount, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel29)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(spinnerPrepareFillGroup)
                        .addGap(95, 95, 95))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(prepareNetworkButton, javax.swing.GroupLayout.DEFAULT_SIZE, 141, Short.MAX_VALUE)
                        .addGap(95, 95, 95))))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel28)
                    .addComponent(spinnerPrepareGroupCount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel29)
                    .addComponent(spinnerPrepareFillGroup, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(prepareNetworkButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout configurationsPanelLayout = new javax.swing.GroupLayout(configurationsPanel);
        configurationsPanel.setLayout(configurationsPanelLayout);
        configurationsPanelLayout.setHorizontalGroup(
            configurationsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(configurationsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 221, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(configurationsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(configurationsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(removeConfigButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(overwriteConfigButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(loadConfigButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(newConfigButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap(141, Short.MAX_VALUE))
        );
        configurationsPanelLayout.setVerticalGroup(
            configurationsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(configurationsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(configurationsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 562, Short.MAX_VALUE)
                    .addGroup(configurationsPanelLayout.createSequentialGroup()
                        .addComponent(newConfigButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(loadConfigButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(overwriteConfigButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(removeConfigButton)
                        .addGap(53, 53, 53)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        mainTabbedPane.addTab("Configurations", configurationsPanel);

        statisticsPanel.setPreferredSize(new java.awt.Dimension(681, 163));

        spinnerRedrawDelay.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(10), Integer.valueOf(1), null, Integer.valueOf(1)));
        spinnerRedrawDelay.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spinnerRedrawDelayStateChanged(evt);
            }
        });

        jLabel1.setText("Redraw Delay");

        jLabel2.setText("t =");

        tLabel.setText("0");

        jLabel3.setText("p =");

        spinnerp.setModel(new javax.swing.SpinnerNumberModel(0.0d, 0.0d, 1.0d, 0.0010d));
        spinnerp.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spinnerpStateChanged(evt);
            }
        });

        jLabel4.setText("t_l =");

        spinnert_l.setModel(new javax.swing.SpinnerNumberModel(Double.valueOf(0.0d), Double.valueOf(0.0d), null, Double.valueOf(1.0d)));
        spinnert_l.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spinnert_lStateChanged(evt);
            }
        });

        jLabel5.setText("t_u =");

        spinnert_u.setModel(new javax.swing.SpinnerNumberModel(Double.valueOf(0.0d), Double.valueOf(0.0d), null, Double.valueOf(1.0d)));
        spinnert_u.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spinnert_uStateChanged(evt);
            }
        });

        spinnerMax_s.setModel(new javax.swing.SpinnerNumberModel(Double.valueOf(0.0d), Double.valueOf(0.0d), null, Double.valueOf(0.01d)));
        spinnerMax_s.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spinnerMax_sStateChanged(evt);
            }
        });

        jLabel6.setText("max_s =");

        totalOccLabel.setText("0");

        jLabel8.setText("total occ. =");

        spinnerN.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(1), Integer.valueOf(1), null, Integer.valueOf(1)));
        spinnerN.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spinnerNStateChanged(evt);
            }
        });

        jLabel7.setText("N =");

        spinnerTimerDelay.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(10), Integer.valueOf(1), null, Integer.valueOf(10)));
        spinnerTimerDelay.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spinnerTimerDelayStateChanged(evt);
            }
        });
        spinnerTimerDelay.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                spinnerTimerDelayKeyPressed(evt);
            }
        });

        jLabel27.setText("Timer Delay");

        spinnerSeed.setModel(new javax.swing.SpinnerNumberModel(Long.valueOf(0L), null, null, Long.valueOf(1L)));
        spinnerSeed.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spinnerSeedStateChanged(evt);
            }
        });

        jLabel26.setText("seed =");

        javax.swing.GroupLayout statisticsPanelLayout = new javax.swing.GroupLayout(statisticsPanel);
        statisticsPanel.setLayout(statisticsPanelLayout);
        statisticsPanelLayout.setHorizontalGroup(
            statisticsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(statisticsPanelLayout.createSequentialGroup()
                .addGroup(statisticsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(statisticsPanelLayout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addGroup(statisticsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5)
                            .addComponent(jLabel7)
                            .addComponent(jLabel6)
                            .addComponent(jLabel8)
                            .addComponent(jLabel27))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(statisticsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(statisticsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(totalOccLabel)
                                .addComponent(tLabel)
                                .addComponent(spinnerp)
                                .addComponent(spinnert_l)
                                .addComponent(spinnert_u)
                                .addComponent(spinnerN)
                                .addComponent(spinnerMax_s)
                                .addComponent(spinnerRedrawDelay, javax.swing.GroupLayout.DEFAULT_SIZE, 66, Short.MAX_VALUE))
                            .addComponent(spinnerTimerDelay, javax.swing.GroupLayout.DEFAULT_SIZE, 66, Short.MAX_VALUE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, statisticsPanelLayout.createSequentialGroup()
                        .addContainerGap(35, Short.MAX_VALUE)
                        .addComponent(spinnerSeed, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(statisticsPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel26)))
                .addContainerGap())
        );
        statisticsPanelLayout.setVerticalGroup(
            statisticsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(statisticsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(statisticsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(spinnerTimerDelay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel27))
                .addGap(18, 18, 18)
                .addGroup(statisticsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(spinnerRedrawDelay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(18, 18, 18)
                .addGroup(statisticsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(tLabel))
                .addGap(18, 18, 18)
                .addGroup(statisticsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(spinnerp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(statisticsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(spinnert_l, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(statisticsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(spinnert_u, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(statisticsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(spinnerN, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addGap(18, 18, 18)
                .addGroup(statisticsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(spinnerMax_s, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addGap(18, 18, 18)
                .addGroup(statisticsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(totalOccLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 180, Short.MAX_VALUE)
                .addComponent(jLabel26)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(spinnerSeed, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addComponent(mainTabbedPane, javax.swing.GroupLayout.DEFAULT_SIZE, 575, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(statisticsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(statisticsPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 629, Short.MAX_VALUE)
            .addComponent(mainTabbedPane, javax.swing.GroupLayout.DEFAULT_SIZE, 629, Short.MAX_VALUE)
        );

        getContentPane().add(jPanel4);

        jMenu1.setText("Run");
        jMenu1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenu1ActionPerformed(evt);
            }
        });

        menuItemRun.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_R, java.awt.event.InputEvent.ALT_MASK));
        menuItemRun.setText("Running");
        menuItemRun.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemRunActionPerformed(evt);
            }
        });
        jMenu1.add(menuItemRun);

        menuItemStep.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_I, java.awt.event.InputEvent.ALT_MASK));
        menuItemStep.setText("Step");
        menuItemStep.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemStepActionPerformed(evt);
            }
        });
        jMenu1.add(menuItemStep);

        jMenuItem4.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Q, java.awt.event.InputEvent.ALT_MASK));
        jMenuItem4.setText("Step n times...");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem4);

        menuItemReseed.setText("Reseed");
        menuItemReseed.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemReseedActionPerformed(evt);
            }
        });
        jMenu1.add(menuItemReseed);

        menuItemReset.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_T, java.awt.event.InputEvent.ALT_MASK));
        menuItemReset.setText("Reset");
        menuItemReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemResetActionPerformed(evt);
            }
        });
        jMenu1.add(menuItemReset);

        menuItemRecalc.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.ALT_MASK));
        menuItemRecalc.setText("Recalc");
        menuItemRecalc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemRecalcActionPerformed(evt);
            }
        });
        jMenu1.add(menuItemRecalc);

        menuItemReseedAndReset.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.ALT_MASK));
        menuItemReseedAndReset.setText("Reseed & reset");
        menuItemReseedAndReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemReseedAndResetActionPerformed(evt);
            }
        });
        jMenu1.add(menuItemReseedAndReset);

        jMenuItem7.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.ALT_MASK));
        jMenuItem7.setText("Recalc det. bits");
        jMenuItem7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem7ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem7);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Network");

        jMenuItem5.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_L, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem5.setText("Load snapshot");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem5);

        jMenuItem6.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem6.setText("Save snapshot");
        jMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem6ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem6);

        menuItemExtNeighbourStat.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.ALT_MASK));
        menuItemExtNeighbourStat.setText("Extended neighbour statistics");
        menuItemExtNeighbourStat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemExtNeighbourStatActionPerformed(evt);
            }
        });
        jMenu2.add(menuItemExtNeighbourStat);

        jMenuBar1.add(jMenu2);

        jMenu3.setText("View");

        jCheckBoxMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.ALT_MASK));
        jCheckBoxMenuItem1.setText("Show statistics");
        jCheckBoxMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxMenuItem1ActionPerformed(evt);
            }
        });
        jMenu3.add(jCheckBoxMenuItem1);

        jMenuItem2.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_K, java.awt.event.InputEvent.ALT_MASK));
        jMenuItem2.setText("Previous tab");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem2);

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_L, java.awt.event.InputEvent.ALT_MASK));
        jMenuItem1.setText("Next tab");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem1);

        jMenuItem3.setText("Show COG window");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem3);

        menuItemSaveSnapshot.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_I, java.awt.event.InputEvent.CTRL_MASK));
        menuItemSaveSnapshot.setText("Save Snapshot");
        menuItemSaveSnapshot.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemSaveSnapshotActionPerformed(evt);
            }
        });
        jMenu3.add(menuItemSaveSnapshot);

        menuItemDrawMeans.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_M, java.awt.event.InputEvent.ALT_MASK));
        menuItemDrawMeans.setText("Draw means");
        menuItemDrawMeans.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemDrawMeansActionPerformed(evt);
            }
        });
        jMenu3.add(menuItemDrawMeans);

        menuItemDrawDetBits.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_D, java.awt.event.InputEvent.ALT_MASK));
        menuItemDrawDetBits.setText("Determinant bits");
        menuItemDrawDetBits.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemDrawDetBitsActionPerformed(evt);
            }
        });
        jMenu3.add(menuItemDrawDetBits);

        menuItemFullscreen.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F, java.awt.event.InputEvent.ALT_MASK));
        menuItemFullscreen.setText("Fullscreen");
        menuItemFullscreen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemFullscreenActionPerformed(evt);
            }
        });
        jMenu3.add(menuItemFullscreen);

        jMenuBar1.add(jMenu3);

        jMenu4.setText("               ");
        jMenu4.setEnabled(false);
        jMenuBar1.add(jMenu4);

        menuStat_p.setText("p = 0");
        menuStat_p.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuStat_pActionPerformed(evt);
            }
        });

        jMenuItem8.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, java.awt.event.InputEvent.ALT_MASK));
        jMenuItem8.setText("Set p...");
        jMenuItem8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem8ActionPerformed(evt);
            }
        });
        menuStat_p.add(jMenuItem8);

        jMenuBar1.add(menuStat_p);

        menuStat_t.setText("t = 0");
        menuStat_t.setFocusable(false);
        jMenuBar1.add(menuStat_t);

        menuStatTotalOcc.setText("total occ. = 0");
        jMenuBar1.add(menuStatTotalOcc);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public void updateParamSpinners() {
        menuStat_p.setText("p = " + Application.getIdnetManager().getp());
        spinnerp.setValue(Application.getIdnetManager().getp());
        spinnert_l.setValue(Application.getIdnetManager().gett_l());
        spinnert_u.setValue(Application.getIdnetManager().gett_u());
        spinnerN.setValue(Application.getIdnetManager().getN());
        spinnerSeed.setValue(Application.getIdnetManager().getSeed());

        spinnerLinkW0.setValue(Application.getIdnetManager().getLinkWeighting(0));
        spinnerLinkW1.setValue(Application.getIdnetManager().getLinkWeighting(1));
        spinnerLinkW2.setValue(Application.getIdnetManager().getLinkWeighting(2));
        spinnerLinkW3.setValue(Application.getIdnetManager().getLinkWeighting(3));
        spinnerLinkW4.setValue(Application.getIdnetManager().getLinkWeighting(4));
        spinnerLinkW5.setValue(Application.getIdnetManager().getLinkWeighting(5));
        spinnerLinkW6.setValue(Application.getIdnetManager().getLinkWeighting(6));
        spinnerLinkW7.setValue(Application.getIdnetManager().getLinkWeighting(7));
        spinnerLinkW8.setValue(Application.getIdnetManager().getLinkWeighting(8));
        spinnerLinkW9.setValue(Application.getIdnetManager().getLinkWeighting(9));
        spinnerLinkW10.setValue(Application.getIdnetManager().getLinkWeighting(10));
        spinnerLinkW11.setValue(Application.getIdnetManager().getLinkWeighting(11));
    }

    public void updateIdnetStatistics() {
        tLabel.setText(Integer.toString(Application.getIdnetManager().gett()));
        menuStat_t.setText("t = " + Integer.toString(Application.getIdnetManager().gett()));
        menuStatTotalOcc.setText("total occ. = " + Integer.toString(Application.getIdnetManager().gettotal_sum_n()));
        totalOccLabel.setText(Integer.toString(Application.getIdnetManager().gettotal_sum_n()));
        for (Window w : getWindows())
            w.repaint();
    }

    private void spinnerRedrawDelayStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_spinnerRedrawDelayStateChanged
        redrawDelay = ((Integer) spinnerRedrawDelay.getValue()).intValue();
        Application.getConfiguration().setProperty("redraw_delay", ((Integer) spinnerRedrawDelay.getValue()).toString());
    }//GEN-LAST:event_spinnerRedrawDelayStateChanged

    private void spinnerpStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_spinnerpStateChanged
        Application.getIdnetManager().setp((Double) spinnerp.getValue());
    }//GEN-LAST:event_spinnerpStateChanged

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        Application.closing();
    }//GEN-LAST:event_formWindowClosing

    private void spinnerMax_sStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_spinnerMax_sStateChanged
        Application.getIdnetManager().setmax_s((Double) spinnerMax_s.getValue());
    }//GEN-LAST:event_spinnerMax_sStateChanged

    private void spinnerNStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_spinnerNStateChanged
        Application.getIdnetManager().setN((Integer) spinnerN.getValue());
    }//GEN-LAST:event_spinnerNStateChanged

    private void spinnerLinkWeightingChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_spinnerLinkWeightingChanged
        if (evt.getSource().equals(spinnerLinkW0))
            Application.getIdnetManager().setLinkWeighting(0, (Double) spinnerLinkW0.getValue());
        else if (evt.getSource().equals(spinnerLinkW1))
            Application.getIdnetManager().setLinkWeighting(1, (Double) spinnerLinkW1.getValue());
        else if (evt.getSource().equals(spinnerLinkW2))
            Application.getIdnetManager().setLinkWeighting(2, (Double) spinnerLinkW2.getValue());
        else if (evt.getSource().equals(spinnerLinkW3))
            Application.getIdnetManager().setLinkWeighting(3, (Double) spinnerLinkW3.getValue());
        else if (evt.getSource().equals(spinnerLinkW4))
            Application.getIdnetManager().setLinkWeighting(4, (Double) spinnerLinkW4.getValue());
        else if (evt.getSource().equals(spinnerLinkW5))
            Application.getIdnetManager().setLinkWeighting(5, (Double) spinnerLinkW5.getValue());
        else if (evt.getSource().equals(spinnerLinkW6))
            Application.getIdnetManager().setLinkWeighting(6, (Double) spinnerLinkW6.getValue());
        else if (evt.getSource().equals(spinnerLinkW7))
            Application.getIdnetManager().setLinkWeighting(7, (Double) spinnerLinkW7.getValue());
        else if (evt.getSource().equals(spinnerLinkW8))
            Application.getIdnetManager().setLinkWeighting(8, (Double) spinnerLinkW8.getValue());
        else if (evt.getSource().equals(spinnerLinkW9))
            Application.getIdnetManager().setLinkWeighting(9, (Double) spinnerLinkW9.getValue());
        else if (evt.getSource().equals(spinnerLinkW10))
            Application.getIdnetManager().setLinkWeighting(10, (Double) spinnerLinkW10.getValue());
        else if (evt.getSource().equals(spinnerLinkW11))
            Application.getIdnetManager().setLinkWeighting(11, (Double) spinnerLinkW11.getValue());
        updateParamSpinners();
    }//GEN-LAST:event_spinnerLinkWeightingChanged

    private void spinnerSeedStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_spinnerSeedStateChanged
        Application.getIdnetManager().reseed((Long) spinnerSeed.getValue());
    }//GEN-LAST:event_spinnerSeedStateChanged

    private void setp_deadlyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setp_deadlyButtonActionPerformed
        double[] lw = new double[12];
        double v = 1, p = (Double) spinnerp_deadly.getValue();
        for (int i = 0; i < 12; i++) {
            lw[i] = v;
            v *= (1 - p);
        }
        spinnerLinkW0.setValue(lw[0]);
        spinnerLinkW1.setValue(lw[1]);
        spinnerLinkW2.setValue(lw[2]);
        spinnerLinkW3.setValue(lw[3]);
        spinnerLinkW4.setValue(lw[4]);
        spinnerLinkW5.setValue(lw[5]);
        spinnerLinkW6.setValue(lw[6]);
        spinnerLinkW7.setValue(lw[7]);
        spinnerLinkW8.setValue(lw[8]);
        spinnerLinkW9.setValue(lw[9]);
        spinnerLinkW10.setValue(lw[10]);
        spinnerLinkW11.setValue(lw[11]);
    }//GEN-LAST:event_setp_deadlyButtonActionPerformed

    private void loadConfigButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadConfigButtonActionPerformed
        int s = configurationsList.getSelectedIndex();
        if (s > -1) {
            Application.getIdnetManager().loadParams(Application.getConfigurations().get(s));
            Application.getIdnetManager().reset();
            updateParamSpinners();
        }
    }//GEN-LAST:event_loadConfigButtonActionPerformed

    private void newConfigButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newConfigButtonActionPerformed
        String name = JOptionPane.showInputDialog("Name:");
        if (name != null && !name.isEmpty()) {
            Properties p = new Properties();
            p.putAll(Application.getIdnetManager().getParams());
            p.setProperty("name", name);
            Application.getConfigurations().add(p);
            ((DefaultListModel) (configurationsList.getModel())).addElement(name);
        }
    }//GEN-LAST:event_newConfigButtonActionPerformed

    private void removeConfigButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeConfigButtonActionPerformed
        int s = configurationsList.getSelectedIndex();
        if (s > -1) {
            Application.getConfigurations().remove(s);
            ((DefaultListModel) configurationsList.getModel()).remove(s);
        }
    }//GEN-LAST:event_removeConfigButtonActionPerformed

    private void overwriteConfigButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_overwriteConfigButtonActionPerformed
        int s = configurationsList.getSelectedIndex();
        if (s > -1) {
            Properties p = new Properties();
            p.putAll(Application.getIdnetManager().getParams());
            p.setProperty("name", Application.getConfigurations().get(s).getProperty("name"));
            Application.getConfigurations().set(s, p);
        }
    }//GEN-LAST:event_overwriteConfigButtonActionPerformed

    private void spinnert_lStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_spinnert_lStateChanged
        Application.getIdnetManager().sett_l((Double) spinnert_l.getValue());
    }//GEN-LAST:event_spinnert_lStateChanged

    private void spinnert_uStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_spinnert_uStateChanged
        Application.getIdnetManager().sett_u((Double) spinnert_u.getValue());
    }//GEN-LAST:event_spinnert_uStateChanged

    private void calcClustersButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_calcClustersButtonActionPerformed
        class MyComparator implements Comparator {

            public int compare(Object obj1, Object obj2) {
                int result = 0;
                Map.Entry<Integer, Integer> e1 = (Map.Entry<Integer, Integer>) obj1;
                Map.Entry<Integer, Integer> e2 = (Map.Entry<Integer, Integer>) obj2;
                Integer value1 = (Integer) e1.getKey();
                Integer value2 = (Integer) e2.getKey();

                if (value1.compareTo(value2) == 0) {
                    Integer int1 = (Integer) e1.getValue();
                    Integer int2 = (Integer) e2.getValue();
                    result = int1.compareTo(int2);
                } else
                    result = value2.compareTo(value1);

                return result;
            }
        }

        Vector<Vector<Idiotype>> clusters = Application.getIdnetManager().calcClusters();
        Hashtable<Integer, Integer> clusterSizes = new Hashtable<Integer, Integer>();
        for (Vector<Idiotype> cluster : clusters)
            if (clusterSizes.containsKey(cluster.size()))
                clusterSizes.put(cluster.size(), clusterSizes.get(cluster.size()) + 1);
            else
                clusterSizes.put(cluster.size(), 1);
        String text = "Clusters:\n\nSize\tNumber\n\n";

        ArrayList<Map.Entry<Integer, Integer>> myArrayList = new ArrayList<Map.Entry<Integer, Integer>>(clusterSizes.entrySet());
        Collections.sort(myArrayList, new MyComparator());


        for (Entry<Integer, Integer> e : myArrayList)
            text += e.getKey() + "\t" + e.getValue() + "\n";
        clustersText.setText(text);
    }//GEN-LAST:event_calcClustersButtonActionPerformed

    private void calcGroupOccButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_calcGroupOccButtonActionPerformed
        String text = null;
        if (!menuItemDrawMeans.isSelected()) {
            /*            Application.getIdnetManager().calcDeterminantBits();
            int d_m = Application.getIdnetManager().getd_m();
            text = "Group\tOcc.\n\n";
            for (int i = 0; i <= d_m; i++)
            text += "S_" + i + "\t" + Application.getIdnetManager().getGroupOccupation(i) + "\n";*/
        } else {
            int d_m = Application.getIdnetManager().getd_m();
            text = "Group\tMean occ.\n\n";
            for (int i = 0; i <= d_m; i++)
                text += "S_" + i + "\t" + (double) ((int) (10000 * (double) Application.getIdnetManager().
                        getTotalGroupOccs()[i] / Application.getIdnetManager().gett() / Application.getIdnetManager().
                        calcGroupSize(i, d_m))) / 10000 + "\n";
        }
        groupOccText.setText(text);
    }//GEN-LAST:event_calcGroupOccButtonActionPerformed

    private void formKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyPressed
    }//GEN-LAST:event_formKeyPressed

    private void formKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyTyped
    }//GEN-LAST:event_formKeyTyped

    private void menuItemRunActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemRunActionPerformed
        if (timer.isRunning())
            timer.stop();
        else
            timer.start();
    }//GEN-LAST:event_menuItemRunActionPerformed

    private void menuItemStepActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemStepActionPerformed
        Application.getIdnetManager().iterate();
        updateIdnetStatistics();
    }//GEN-LAST:event_menuItemStepActionPerformed

    private void menuItemReseedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemReseedActionPerformed
        long seed = System.currentTimeMillis();
        spinnerSeed.setValue((Long) seed);
        Application.getIdnetManager().reseed(seed);
    }//GEN-LAST:event_menuItemReseedActionPerformed

    private void menuItemResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemResetActionPerformed
        Application.getIdnetManager().reseed((Long) spinnerSeed.getValue());
        Application.getIdnetManager().reset();
        ((NetworkTopologyPanel) networkTopologyPanel).recalc();
    }//GEN-LAST:event_menuItemResetActionPerformed

    private void jMenu1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenu1ActionPerformed
        Application.getIdnetManager().recalc();
        ((NetworkTopologyPanel) networkTopologyPanel).recalc();
    }//GEN-LAST:event_jMenu1ActionPerformed

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
        String fileName = JOptionPane.showInputDialog("Filename:");
        if (fileName != null && !fileName.isEmpty()) {
            try {
                Application.getIdnetManager().loadNetwork(fileName);
            } catch (IOException io) {
                io.printStackTrace();
                return;
            }
            JOptionPane.showMessageDialog(this, "Network snapshot loaded");
        }
        requestFocus();
    }//GEN-LAST:event_jMenuItem5ActionPerformed

    private void jMenuItem6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem6ActionPerformed
        String fileName = JOptionPane.showInputDialog("Filename:");
        if (fileName != null && !fileName.isEmpty())
            try {
                Application.getIdnetManager().saveNetwork(fileName);
            } catch (IOException io) {
                io.printStackTrace();
            }
        requestFocus();
    }//GEN-LAST:event_jMenuItem6ActionPerformed

    private void menuItemReseedAndResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemReseedAndResetActionPerformed
        menuItemReseedActionPerformed(evt);
        menuItemResetActionPerformed(evt);
    }//GEN-LAST:event_menuItemReseedAndResetActionPerformed

    private void jCheckBoxMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxMenuItem1ActionPerformed
        statisticsPanel.setVisible(!statisticsPanel.isVisible());
    }//GEN-LAST:event_jCheckBoxMenuItem1ActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        mainTabbedPane.setSelectedIndex((mainTabbedPane.getSelectedIndex() + 1) % mainTabbedPane.getTabCount());
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        mainTabbedPane.setSelectedIndex((mainTabbedPane.getSelectedIndex() + mainTabbedPane.getTabCount() - 1)
                % mainTabbedPane.getTabCount());
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        final JFrame f = new JFrame("COG diagram");
        final COGDiagramPanel p = new COGDiagramPanel(Application.getIdnetManager());
        f.getContentPane().add(p);
        p.setBackground(Color.WHITE);
        f.setSize(1050, 470);
        f.setVisible(true);
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void spinnerTimerDelayStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_spinnerTimerDelayStateChanged
        timer.setDelay((Integer) spinnerTimerDelay.getValue());
    }//GEN-LAST:event_spinnerTimerDelayStateChanged

    private void panelMouseClickedPerformed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_panelMouseClickedPerformed
        mainTabbedPane.requestFocusInWindow();
    }//GEN-LAST:event_panelMouseClickedPerformed

    private void menuItemSaveSnapshotActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemSaveSnapshotActionPerformed
        if (mainTabbedPane.getSelectedComponent() instanceof JPanel) {
            String fileName = JOptionPane.showInputDialog("Filename:");
            if (fileName != null && !fileName.isEmpty())
                try {
                    BufferedImage i = new BufferedImage(mainTabbedPane.getSelectedComponent().getWidth(), mainTabbedPane.getSelectedComponent().getHeight(), BufferedImage.TYPE_INT_ARGB);
                    mainTabbedPane.getSelectedComponent().paint(i.createGraphics());
                    //cogDiagramPanel.paint(i.createGraphics());
                    ImageIO.write(i, "png", new File(fileName));
                } catch (IOException io) {
                    io.printStackTrace();
                }
        }
    }//GEN-LAST:event_menuItemSaveSnapshotActionPerformed

    private void prepareNetworkButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_prepareNetworkButtonActionPerformed
        int d_m = (Integer) spinnerPrepareGroupCount.getValue();
        int k = (Integer) spinnerPrepareFillGroup.getValue();
        int mask = (1 << d_m) - 1;
        Application.getIdnetManager().reset();
        Idiotype[] idiotypes = Application.getIdnetManager().getIdiotypes();
        for (int i = 0; i < (1 << 12); i++)
            if (Helper.hammingWeight(i & mask) == k)
                idiotypes[i].n = 1;
        textCustomBitMask.setText(Helper.getBitString(mask));
        textCustomBitValues.setText("000000000000");
    }//GEN-LAST:event_prepareNetworkButtonActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        class IterationTask extends SwingWorker<Void, Void> {

            private static final int STEP_SIZE = 250;
            private int n;

            public IterationTask(int n) {
                this.n = n;
            }

            @Override
            public Void doInBackground() {
                setProgress(0);
                for (int i = 0; i < n; i += STEP_SIZE) {
                    Application.getIdnetManager().iterate(Math.min(STEP_SIZE, n - i));
                    setProgress(100 * (i + 1) / n);
                    if (isCancelled())
                        return null;
                }
                setProgress(100);
                return null;
            }

            @Override
            public void done() {
            }
        }

        if (timer.isRunning())
            menuItemRunActionPerformed(evt);

        String nStr = JOptionPane.showInputDialog("n = ");
        if (nStr != null && !nStr.equals(""))
            try {
                final int n = Integer.parseInt(nStr);
                final ProgressMonitor progressMonitor = new ProgressMonitor(this,
                        "Iterating...",
                        "", 0, 100);
                progressMonitor.setProgress(0);
                final IterationTask task = new IterationTask(n);
                task.addPropertyChangeListener(new PropertyChangeListener() {

                    public void propertyChange(PropertyChangeEvent evt) {
                        if ("progress".equals(evt.getPropertyName())) {
                            int progress = (Integer) evt.getNewValue();
                            progressMonitor.setProgress(progress);
                            progressMonitor.setNote(progress + "%");
                            if (progressMonitor.isCanceled() || task.isDone()) {
                                if (progressMonitor.isCanceled())
                                    task.cancel(true);
                                progressMonitor.close();
                                updateIdnetStatistics();
                                setEnabled(true);
                            }
                        }
                    }
                });
                task.execute();
                setEnabled(false);
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "Not an integer!");
            }
        requestFocus();
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void detBitsUpButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_detBitsUpButtonActionPerformed
        int sel = detBitsList.getSelectedIndex();
        if (sel > 0) {
            String tmp = (String) ((DefaultListModel) detBitsList.getModel()).get(sel);
            ((DefaultListModel) detBitsList.getModel()).setElementAt(((DefaultListModel) detBitsList.getModel()).get(sel - 1), sel);
            ((DefaultListModel) detBitsList.getModel()).setElementAt(tmp, sel - 1);
            detBitsList.setSelectedIndex(sel - 1);
        }
        menuItemDrawDetBitsActionPerformed(evt);
    }//GEN-LAST:event_detBitsUpButtonActionPerformed

    private void detBitsDownButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_detBitsDownButtonActionPerformed
        int sel = detBitsList.getSelectedIndex();
        if (sel < 11) {
            String tmp = (String) ((DefaultListModel) detBitsList.getModel()).get(sel);
            ((DefaultListModel) detBitsList.getModel()).setElementAt(((DefaultListModel) detBitsList.getModel()).get(sel + 1), sel);
            ((DefaultListModel) detBitsList.getModel()).setElementAt(tmp, sel + 1);
            detBitsList.setSelectedIndex(sel + 1);
        }
        menuItemDrawDetBitsActionPerformed(evt);
    }//GEN-LAST:event_detBitsDownButtonActionPerformed

    private void menuItemRecalcActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemRecalcActionPerformed
        Application.getIdnetManager().recalc();
        updateIdnetStatistics();
    }//GEN-LAST:event_menuItemRecalcActionPerformed

    private void menuItemDrawMeansActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemDrawMeansActionPerformed
        if (menuItemDrawMeans.isSelected())
            ((NetworkTopologyPanel) networkTopologyPanel).setDrawType(NetworkTopologyPanel.DRAW_TOTAL_MEANS);
        else
            ((NetworkTopologyPanel) networkTopologyPanel).setDrawType(NetworkTopologyPanel.DRAW_CURRENT);
        Application.getIdnetManager().setCalcMeanGroupOccs(menuItemDrawMeans.isSelected());
        updateIdnetStatistics();
    }//GEN-LAST:event_menuItemDrawMeansActionPerformed

    private void menuItemExtNeighbourStatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemExtNeighbourStatActionPerformed
        Application.getIdnetManager().setStatNeighbourOccupations(menuItemExtNeighbourStat.isSelected());
        updateIdnetStatistics();
    }//GEN-LAST:event_menuItemExtNeighbourStatActionPerformed

    private void jMenuItem7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem7ActionPerformed
        DeterminantBits detBits = Application.getIdnetManager().calcDeterminantBits();
        textCustomBitMask.setText(Helper.getBitString(detBits.mask));
        textCustomBitValues.setText(Helper.getBitString(detBits.values));
        for (int i = 0; i < 12; i++)
            ((DefaultListModel) detBitsList.getModel()).setElementAt(Integer.toString(detBits.order[i]), i);
        menuItemDrawDetBitsActionPerformed(evt);
    }//GEN-LAST:event_jMenuItem7ActionPerformed

    private void menuItemDrawDetBitsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemDrawDetBitsActionPerformed
        if (menuItemDrawDetBits.isSelected()) {
            DeterminantBits detBits = new DeterminantBits();
            detBits.mask = Integer.parseInt(textCustomBitMask.getText(), 2);
            detBits.values = Integer.parseInt(textCustomBitValues.getText(), 2);
            detBits.order = new int[12];
            for (int i = 0; i < 12; i++)
                detBits.order[i] = Integer.parseInt((String) ((DefaultListModel) detBitsList.getModel()).get(i));

            ((Network2DPanel) network2DPanel).arrangeByDetBitGroups(detBits);
            ((NetworkTopologyPanel) networkTopologyPanel).setDeterminantBits(detBits);
        } else {
            ((Network2DPanel) network2DPanel).arrangeDefault();
            ((NetworkTopologyPanel) networkTopologyPanel).setDeterminantBits(null);
        }
        updateIdnetStatistics();
    }//GEN-LAST:event_menuItemDrawDetBitsActionPerformed

    private void textCustomBitMaskPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_textCustomBitMaskPropertyChange
        menuItemDrawDetBitsActionPerformed(null);
    }//GEN-LAST:event_textCustomBitMaskPropertyChange

    private void textCustomBitValuesPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_textCustomBitValuesPropertyChange
        menuItemDrawDetBitsActionPerformed(null);
    }//GEN-LAST:event_textCustomBitValuesPropertyChange

    private void menuItemFullscreenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemFullscreenActionPerformed
        getGraphicsConfiguration().getDevice().setFullScreenWindow(menuItemFullscreen.isSelected() ? this : null);
    }//GEN-LAST:event_menuItemFullscreenActionPerformed

    private void spinnerTimerDelayKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_spinnerTimerDelayKeyPressed
    }//GEN-LAST:event_spinnerTimerDelayKeyPressed

    private void menuStat_pActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuStat_pActionPerformed
    }//GEN-LAST:event_menuStat_pActionPerformed

    private void jMenuItem8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem8ActionPerformed
        String nStr = JOptionPane.showInputDialog("p = ");
        if (nStr != null && !nStr.equals(""))
            try {
                final double p = Double.parseDouble(nStr);
                Application.getIdnetManager().setp(p);
                updateParamSpinners();
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "Not a number!");
            }
        requestFocus();
    }//GEN-LAST:event_jMenuItem8ActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton calcClustersButton;
    private javax.swing.JButton calcGroupOccButton;
    private javax.swing.JPanel clusterPanel;
    private javax.swing.JTextArea clustersText;
    private javax.swing.JPanel cogDiagramPanel;
    private javax.swing.JList configurationsList;
    private javax.swing.JPanel configurationsPanel;
    private javax.swing.JButton detBitsDownButton;
    private javax.swing.JList detBitsList;
    private javax.swing.JPanel detBitsPanel;
    private javax.swing.JButton detBitsUpButton;
    private javax.swing.ButtonGroup drawTypeButtonGroup;
    private javax.swing.JTextArea groupOccText;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItem7;
    private javax.swing.JMenuItem jMenuItem8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JPanel linkWeightingPanel;
    private javax.swing.JButton loadConfigButton;
    private javax.swing.JTabbedPane mainTabbedPane;
    private javax.swing.JCheckBoxMenuItem menuItemDrawDetBits;
    private javax.swing.JCheckBoxMenuItem menuItemDrawMeans;
    private javax.swing.JCheckBoxMenuItem menuItemExtNeighbourStat;
    private javax.swing.JCheckBoxMenuItem menuItemFullscreen;
    private javax.swing.JMenuItem menuItemRecalc;
    private javax.swing.JMenuItem menuItemReseed;
    private javax.swing.JMenuItem menuItemReseedAndReset;
    private javax.swing.JMenuItem menuItemReset;
    private javax.swing.JCheckBoxMenuItem menuItemRun;
    private javax.swing.JMenuItem menuItemSaveSnapshot;
    private javax.swing.JMenuItem menuItemStep;
    private javax.swing.JMenu menuStatTotalOcc;
    private javax.swing.JMenu menuStat_p;
    private javax.swing.JMenu menuStat_t;
    private javax.swing.JPanel network1DPanel;
    private javax.swing.JPanel network2DPanel;
    private javax.swing.JPanel networkTopologyPanel;
    private javax.swing.JButton newConfigButton;
    private javax.swing.JButton overwriteConfigButton;
    private javax.swing.JButton prepareNetworkButton;
    private javax.swing.JButton removeConfigButton;
    private javax.swing.JButton setp_deadlyButton;
    private javax.swing.JSpinner spinnerLinkW0;
    private javax.swing.JSpinner spinnerLinkW1;
    private javax.swing.JSpinner spinnerLinkW10;
    private javax.swing.JSpinner spinnerLinkW11;
    private javax.swing.JSpinner spinnerLinkW2;
    private javax.swing.JSpinner spinnerLinkW3;
    private javax.swing.JSpinner spinnerLinkW4;
    private javax.swing.JSpinner spinnerLinkW5;
    private javax.swing.JSpinner spinnerLinkW6;
    private javax.swing.JSpinner spinnerLinkW7;
    private javax.swing.JSpinner spinnerLinkW8;
    private javax.swing.JSpinner spinnerLinkW9;
    private javax.swing.JSpinner spinnerMax_s;
    private javax.swing.JSpinner spinnerN;
    private javax.swing.JSpinner spinnerPrepareFillGroup;
    private javax.swing.JSpinner spinnerPrepareGroupCount;
    private javax.swing.JSpinner spinnerRedrawDelay;
    private javax.swing.JSpinner spinnerSeed;
    private javax.swing.JSpinner spinnerTimerDelay;
    private javax.swing.JSpinner spinnerp;
    private javax.swing.JSpinner spinnerp_deadly;
    private javax.swing.JSpinner spinnert_l;
    private javax.swing.JSpinner spinnert_u;
    private javax.swing.JPanel statisticsPanel;
    private javax.swing.JLabel tLabel;
    private javax.swing.JFormattedTextField textCustomBitMask;
    private javax.swing.JFormattedTextField textCustomBitValues;
    private javax.swing.ButtonGroup topologyDrawTypeButtonGroup;
    private javax.swing.JLabel totalOccLabel;
    // End of variables declaration//GEN-END:variables
}
